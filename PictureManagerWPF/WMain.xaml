<controls:MetroWindow x:Name="MainWindow" x:Class="PictureManager.WMain"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:pm="clr-namespace:PictureManager"
        xmlns:viewModel="clr-namespace:PictureManager.ViewModel"
        xmlns:userControls="clr-namespace:PictureManager.UserControls"
        xmlns:media="https://github.com/JohanLarsson/Gu.Wpf.Media"
        mc:Ignorable="d"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="Picture Manager" TitleAlignment="Center" Height="550" Width="930" WindowState="Maximized" 
        Loaded="Window_Loaded" FontSize="13.333" SaveWindowPosition="True" TitleCharacterCasing="Normal"
        LeftWindowCommandsOverlayBehavior="Never" MouseMove="WMain_OnMouseMove" Closing="WMain_OnClosing"
        MouseLeftButtonUp="WMain_OnMouseLeftButtonUp">

  <controls:MetroWindow.TitleTemplate>
    <DataTemplate>
      <Grid>
        <ProgressBar Width="250" Height="22" Maximum="100" DataContext="{x:Static pm:App.Core}" 
                     Value="{Binding AppInfo.ProgressBarValue}" 
                     IsIndeterminate="{Binding AppInfo.ProgressBarIsIndeterminate}" />
        <TextBlock Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" HorizontalAlignment="Center"
                   Margin="8 -1 8 0" FontWeight="Bold" FontSize="{DynamicResource WindowTitleFontSize}"
                   FontFamily="{DynamicResource HeaderFontFamily}" />
      </Grid>
    </DataTemplate>
  </controls:MetroWindow.TitleTemplate>

  <controls:MetroWindow.LeftWindowCommands>
    <controls:WindowCommands>
      <Menu x:Name="MainMenu" Background="Transparent">
        <MenuItem Header="Tools" Style="{StaticResource RootMenuStyle}">
          <MenuItem Command="pm:Commands.CompressPictures" />
          <MenuItem Command="pm:Commands.RotatePictures" />
          <MenuItem Command="pm:Commands.ReloadMetadata" />
          <MenuItem Command="pm:Commands.RebuildThumbnails" />
          <MenuItem Command="pm:Commands.OpenFolderKeywordsList" />
          <MenuItem Command="pm:Commands.OpenSettings" Tag="{x:Static pm:IconName.Settings}" Style="{StaticResource MenuItemIcon}" />
          <MenuItem Command="pm:Commands.AddGeoNamesFromFiles" Tag="{x:Static pm:IconName.LocationCheckin}" Style="{StaticResource MenuItemIcon}" />
          <MenuItem Command="pm:Commands.MediaItemsSelectNotModifed" />
          <MenuItem Command="pm:Commands.TestButton" />
        </MenuItem>
        <MenuItem Header="Keywords" Style="{StaticResource RootMenuStyle}">
          <MenuItem Command="pm:Commands.KeywordsEdit" Tag="{x:Static pm:IconName.Edit}" Style="{StaticResource MenuItemIcon}" />
          <MenuItem Command="pm:Commands.KeywordsSave" Tag="{x:Static pm:IconName.Save}" Style="{StaticResource MenuItemIcon}" />
          <MenuItem Command="pm:Commands.KeywordsCancel" Tag="{x:Static pm:IconName.Cancel}" Style="{StaticResource MenuItemIcon}" />
          <MenuItem Command="pm:Commands.KeywordsComment" Tag="{x:Static pm:IconName.Notification}" Style="{StaticResource MenuItemIcon}" />
        </MenuItem>
        <MenuItem Header="Viewer" x:Name="MenuViewers" Tag="{x:Static pm:IconName.Eye}" Style="{StaticResource RootMenuStyle}" 
                  Icon="{StaticResource MenuItemIconRect}" ItemsSource="{Binding Viewers.Items, Source={x:Static pm:App.Core}}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource MenuItemIcon}">
              <Setter Property="Header" Value="{Binding Title}" />
              <Setter Property="Tag" Value="{x:Static pm:IconName.Eye}" />
              <Setter Property="Command" Value="pm:Commands.ViewerChange" />
              <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>
          </MenuItem.ItemContainerStyle>
        </MenuItem>
        <MenuItem Command="pm:Commands.OpenAbout" Style="{StaticResource RootMenuStyle}" />
      </Menu>
      <TextBlock Text="{Binding AppInfo.MediaItemsCount, Source={x:Static pm:App.Core}}" VerticalAlignment="Center" Margin="5,0" />
      
      <!-- Log Button -->
      <Button Background="Red" Command="pm:Commands.OpenLog" Height="24" Margin="2,0,2,0"
        Visibility="{Binding Log.Count, Source={x:Static pm:App.Core}, Converter={StaticResource AllToVisibilityConverter}}">
        <StackPanel Orientation="Horizontal">
          <TextBlock Text="Log " />
          <TextBlock Text="{Binding Log.Count, Source={x:Static pm:App.Core}}" />
        </StackPanel>
      </Button>

    </controls:WindowCommands>
  </controls:MetroWindow.LeftWindowCommands>

  <controls:MetroWindow.Resources>
    <!-- KeywordsPicCountStyle -->
    <Style x:Key="KeywordsPicCountStyle" TargetType="{x:Type TextBlock}">
      <Setter Property="Text" Value="{Binding PicCount}" />
      <Setter Property="Visibility" Value="Collapsed"/>
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Margin" Value="5,0,0,0" />
      <Setter Property="Padding" Value="5,0" />
      <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsMarked}" Value="True">
          <Setter Property="Visibility" Value="Visible"/>
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <!-- SBorderInfoBoxThumb SBorderInfoBoxStatusBar STextBlockInfoBox -->
    <Style x:Key="SBorderInfoBoxThumb" TargetType="Border">
      <Setter Property="BorderThickness" Value="1" />
      <Setter Property="BorderBrush" Value="Black" />
      <Setter Property="Background" Value="#88000000" />
      <Setter Property="VerticalAlignment" Value="Top"/>
      <Setter Property="Margin" Value="5,5,0,0"/>
      <Setter Property="Padding" Value="2,0,2,1" />
      <Setter Property="CornerRadius" Value="5" />
    </Style>
    <Style x:Key="SBorderInfoBoxStatusBar" TargetType="Border" BasedOn="{StaticResource SBorderInfoBoxThumb}">
      <Setter Property="Margin" Value="3,0,0,3"/>
      <Setter Property="MinWidth" Value="20" />
    </Style>
    <Style x:Key="STextBlockInfoBox" TargetType="TextBlock">
      <Setter Property="Foreground" Value="White" />
      <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    
    <DataTemplate x:Key="DtInfoBoxStatusBar">
      <Border Style="{StaticResource SBorderInfoBoxStatusBar}">
        <TextBlock Text="{Binding}" Style="{StaticResource STextBlockInfoBox}" />
      </Border>
    </DataTemplate>

    <ItemsPanelTemplate x:Key="IptHorizontalStackPanel">
      <StackPanel Orientation="Horizontal" />
    </ItemsPanelTemplate>
  </controls:MetroWindow.Resources>

  <controls:MetroWindow.Flyouts>
    <controls:FlyoutsControl>
      <!-- TabControl wiht TreeView Folders, Keywords and Viewers -->
      <controls:Flyout x:Name="FlyoutMainTreeView" Position="Left" Width="350" IsOpen="True" IsPinned="True" 
        Background="#FF252525" TitleVisibility="Collapsed" CloseButtonVisibility="Collapsed" MouseLeave="FlyoutMainTreeView_OnMouseLeave">
        
        <controls:Flyout.Style>
          <Style TargetType="controls:Flyout">
            <Setter Property="Margin" Value="0" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding AppInfo.AppMode, Source={x:Static pm:App.Core}}" Value="0">
                <Setter Property="Margin" Value="0,30,0,0" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </controls:Flyout.Style>

        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition />
            <RowDefinition>
              <RowDefinition.Style>
                <Style TargetType="RowDefinition">
                  <Setter Property="Height" Value="0" />
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=FlyoutMainTreeView, Path=IsPinned}" Value="True">
                      <Setter Property="Height" Value="{Binding ElementName=FlyoutStatusPanel, Path=ActualHeight}" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </RowDefinition.Style>
            </RowDefinition>
          </Grid.RowDefinitions>

          <!-- TreeView Forders, Keywords and Filters -->
          <TabControl x:Name="TcMain" Grid.Row="0" Background="Transparent" BorderThickness="0">
            <TabControl.Resources>
              <!-- STreeViewItem -->
              <Style TargetType="{x:Type TreeViewItem}" x:Key="STreeViewItem" BasedOn="{StaticResource MetroTreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="Background" Value="Transparent" />
              </Style>

              <!-- STreeViewStackPanel -->
              <Style x:Key="STreeViewStackPanel" TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="Background" Value="Transparent" />
                <EventSetter Event="PreviewMouseRightButtonDown" Handler="AttachContextMenu" />
                <EventSetter Event="PreviewMouseUp" Handler="TreeView_Select" />
              </Style>

              <!-- STreeViewStackPanelWithDrag -->
              <Style x:Key="STreeViewStackPanelWithDrag" BasedOn="{StaticResource STreeViewStackPanel}" TargetType="{x:Type StackPanel}">
                <EventSetter Event="MouseLeftButtonDown" Handler="TreeView_OnMouseLeftButtonDown" />
                <EventSetter Event="MouseMove" Handler="TreeView_OnMouseMove" />
              </Style>

              <!-- STreeViewKeywordsStackPanelWithDrop -->
              <Style x:Key="STreeViewStackPanelWithDrop" BasedOn="{StaticResource STreeViewStackPanel}" TargetType="{x:Type StackPanel}">
                <Setter Property="AllowDrop" Value="True" />
                <EventSetter Event="Drop" Handler="TreeView_OnDrop" />
                <EventSetter Event="DragEnter" Handler="TreeView_AllowDropCheck" />
                <EventSetter Event="DragLeave" Handler="TreeView_AllowDropCheck" />
                <EventSetter Event="DragOver" Handler="TreeView_AllowDropCheck" />
              </Style>

              <!-- STreeViewKeywordsStackPanelWithDragDrop -->
              <Style x:Key="STreeViewStackPanelWithDragDrop" BasedOn="{StaticResource STreeViewStackPanelWithDrop}" TargetType="{x:Type StackPanel}">
                <EventSetter Event="MouseLeftButtonDown" Handler="TreeView_OnMouseLeftButtonDown" />
                <EventSetter Event="MouseMove" Handler="TreeView_OnMouseMove" />
              </Style>

              <!-- BaseTreeViewItem -->
              <HierarchicalDataTemplate DataType="{x:Type viewModel:BaseTreeViewItem}" ItemsSource="{Binding Items}">
                <StackPanel Style="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource TypeToStyleConverter}}">
                  <Rectangle Style="{StaticResource IconRect}" />
                  <TextBlock Style="{StaticResource TreeViewTitle}" />
                </StackPanel>
              </HierarchicalDataTemplate>

              <!-- BaseTreeViewTagItem -->
              <HierarchicalDataTemplate DataType="{x:Type viewModel:BaseTreeViewTagItem}" ItemsSource="{Binding Items}">
                <StackPanel Style="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource TypeToStyleConverter}}">
                  <Rectangle Style="{StaticResource IconRect}" />
                  <TextBlock Style="{StaticResource TreeViewTitle}" />
                  <TextBlock Style="{StaticResource KeywordsPicCountStyle}" />
                </StackPanel>
              </HierarchicalDataTemplate>
            </TabControl.Resources>

            <TabItem Header="Folders" x:Name="TabFolders" HorizontalAlignment="Left">
              <!-- TreeView Folders -->
              <TreeView x:Name="TvFolders" Background="Transparent" 
                      ItemsSource="{Binding FoldersRoot, Source={x:Static pm:App.Core}}">

                <TreeView.ItemContainerStyle>
                  <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource STreeViewItem}">
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsHidden}" Value="True">
                        <Setter Property="Visibility" Value="Collapsed" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TreeView.ItemContainerStyle>
              </TreeView>
            </TabItem>

            <TabItem Header="Keywords" x:Name="TabKeywords" HorizontalAlignment="Left">
              <!-- TreeView Keywords -->
              <TreeView x:Name="TvKeywords" Background="Transparent"
                      ItemsSource="{Binding KeywordsRoot, Source={x:Static pm:App.Core}}">

                <TreeView.ItemContainerStyle>
                  <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource STreeViewItem}">
                    <Setter Property="Background" Value="{Binding BackgroundBrush, Converter={StaticResource BgColorConverter}}" />
                    <Style.Triggers>
                      <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                          <Condition Binding="{Binding IsMarked}" Value="True" />
                          <Condition Binding="{Binding BgBrush}" Value="0" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
                      </MultiDataTrigger>
                    </Style.Triggers>
                  </Style>
                </TreeView.ItemContainerStyle>

                <TreeView.Resources>
                  <!-- TreeView Keywords - Rating -->
                  <HierarchicalDataTemplate DataType="{x:Type viewModel:Rating}">
                    <StackPanel Style="{StaticResource STreeViewStackPanel}">
                      <StackPanel Orientation="Horizontal">
                        <Rectangle Style="{StaticResource IconRect}" Fill="{Binding Value, Converter={StaticResource RatingConverter}, ConverterParameter=0}" />
                        <Rectangle Style="{StaticResource IconRect}" Fill="{Binding Value, Converter={StaticResource RatingConverter}, ConverterParameter=1}" />
                        <Rectangle Style="{StaticResource IconRect}" Fill="{Binding Value, Converter={StaticResource RatingConverter}, ConverterParameter=2}" />
                        <Rectangle Style="{StaticResource IconRect}" Fill="{Binding Value, Converter={StaticResource RatingConverter}, ConverterParameter=3}" />
                        <Rectangle Style="{StaticResource IconRect}" Fill="{Binding Value, Converter={StaticResource RatingConverter}, ConverterParameter=4}" />
                      </StackPanel>
                      <TextBlock Style="{StaticResource KeywordsPicCountStyle}" />
                    </StackPanel>
                  </HierarchicalDataTemplate>

                  <!-- TreeView Keywords - MediaItemSize -->
                  <HierarchicalDataTemplate DataType="{x:Type viewModel:MediaItemSize}">
                    <StackPanel Style="{StaticResource STreeViewStackPanel}" Margin="0,0,3,3">
                      <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}}">
                        <Grid.RowDefinitions>
                          <RowDefinition />
                          <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition />
                          <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <TextBlock HorizontalAlignment="Left" Grid.Row="0" Grid.Column="0" 
                        Text="{Binding PixelMin, Converter={StaticResource MediaItemSizeConverter}}" />
                        <TextBlock HorizontalAlignment="Right" Grid.Row="0" Grid.Column="1" 
                        Text="{Binding PixelMax, Converter={StaticResource MediaItemSizeConverter}}" />

                        <controls:RangeSlider Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" 
                        HorizontalAlignment="Stretch" MoveWholeRange="True" 
                        Minimum="{Binding Min}" Maximum="{Binding Max}"
                        LowerValue="{Binding PixelMin}" UpperValue="{Binding PixelMax}" 
                        UpperThumbDragCompleted="MediaItemSize_OnDragCompleted"
                        LowerThumbDragCompleted="MediaItemSize_OnDragCompleted"
                        CentralThumbDragCompleted="MediaItemSize_OnDragCompleted"
                        IsSnapToTickEnabled="True" TickFrequency="0.1" />
                      </Grid>
                    </StackPanel>
                  </HierarchicalDataTemplate>
                </TreeView.Resources>

              </TreeView>
            </TabItem>

            <TabItem Header="Filters" HorizontalAlignment="Left">
              <!-- TreeView Filters -->
              <TreeView x:Name="TvFilters" Background="Transparent"
                      ItemsSource="{Binding FiltersRoot, Source={x:Static pm:App.Core}}">

                <TreeView.ItemContainerStyle>
                  <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource STreeViewItem}">
                    <Setter Property="ToolTip" Value="{Binding ToolTip}" />
                    <Style.Triggers>
                      <DataTrigger Binding="{Binding IsMarked}" Value="True">
                        <Setter Property="Background" Value="{DynamicResource AccentColorBrush4}" />
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </TreeView.ItemContainerStyle>
              </TreeView>
            </TabItem>
            
            <!-- button to close/open flyout panel -->
            <TabItem HorizontalAlignment="Right">
              <TabItem.HeaderTemplate>
                <DataTemplate>
                  <Button BorderThickness="0" Background="Transparent" Width="30" Height="30"
                          Cursor="{x:Static Cursors.Hand}" Command="{x:Static pm:Commands.ShowHideTabMain}">
                    <Rectangle Style="{StaticResource IconRect2}" Tag="{x:Static pm:IconName.Pin}" />
                  </Button>
                </DataTemplate>
              </TabItem.HeaderTemplate>
            </TabItem>
          </TabControl>

        </Grid>
      </controls:Flyout>

      <!-- Status Panel -->
      <controls:Flyout x:Name="FlyoutStatusPanel" Position="Bottom" Height="Auto" IsOpen="True" 
                       Background="Transparent" TitleVisibility="Collapsed" 
                       CloseButtonVisibility="Collapsed" DataContext="{x:Static pm:App.Core}">
        <controls:Flyout.Style>
          <Style>
            <Setter Property="controls:Flyout.Margin" Value="0,0,0,0" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding AppInfo.AppMode}" Value="0">
                <Setter Property="controls:Flyout.Margin" Value="0,0,15,0" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </controls:Flyout.Style>

        <WrapPanel x:Name="StatusPanel" VerticalAlignment="Bottom" Height="Auto" Margin="0,0,0,1">
          <WrapPanel.Style>
            <Style>
              <Style.Resources>
                <Style TargetType="Border" BasedOn="{StaticResource SBorderInfoBoxStatusBar}" />
                <Style TargetType="TextBlock" BasedOn="{StaticResource STextBlockInfoBox}" />
              </Style.Resources>
            </Style>
          </WrapPanel.Style>

          <!-- PositionSlashCount -->
          <Border Visibility="{Binding MediaItems.Items.Count, Converter={StaticResource AllToVisibilityConverter}}">
            <TextBlock Text="{Binding AppInfo.PositionSlashCount}" />
          </Border>

          <!-- Selected -->
          <Border Background="{DynamicResource AccentColorBrush}">
            <Border.Style>
              <Style TargetType="Border" BasedOn="{StaticResource SBorderInfoBoxStatusBar}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding AppInfo.AppMode}" Value="1">
                    <Setter Property="Visibility" Value="Collapsed" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding MediaItems.Items.Count}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Border.Style>
            <TextBlock Text="{Binding MediaItems.Selected}" />
          </Border>

          <!-- Modifed -->
          <Border Background="#CA5100" 
                  Visibility="{Binding MediaItems.IsEditModeOn, Converter={StaticResource AllToVisibilityConverter}}">
            <TextBlock Text="{Binding MediaItems.Modifed}" />
          </Border>

          <!-- Dimension -->
          <Border Visibility="{Binding AppInfo.Dimension, Converter={StaticResource AllToVisibilityConverter}}">
            <TextBlock Text="{Binding AppInfo.Dimension}" />
          </Border>

          <!-- ImageActualZoom -->
          <Border Visibility="{Binding AppInfo.IsImageActualZoomVisible, Converter={StaticResource AllToVisibilityConverter}}">
            <TextBlock Text="{Binding ElementName=FullImage, Path=ZoomActualFormated}" />
          </Border>

          <!-- Rating -->
          <Border Visibility="{Binding AppInfo.Rating.Count, Converter={StaticResource AllToVisibilityConverter}}">
            <ItemsControl ItemsSource="{Binding AppInfo.Rating}" ItemsPanel="{StaticResource IptHorizontalStackPanel}">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Rectangle Style="{StaticResource IconRect}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </Border>

          <!-- GeoName -->
          <Border Visibility="{Binding AppInfo.IsGeoNameVisible, Converter={StaticResource AllToVisibilityConverter}}"
                  ToolTip="{Binding AppInfo.FullGeoName}">
            <Rectangle Tag="{x:Static pm:IconName.LocationCheckin}" Style="{StaticResource IconRect2}" />
          </Border>

          <!-- FilePath -->
          <Border Visibility="{Binding AppInfo.FilePath, Converter={StaticResource AllToVisibilityConverter}}"
                  ToolTip="{Binding AppInfo.CurrentMediaItem.FilePath}">
            <TextBlock Text="{Binding AppInfo.FilePath}" />
          </Border>

          <!-- People -->
          <ItemsControl Visibility="{Binding AppInfo.IsInfoBoxPeopleVisible, Converter={StaticResource AllToVisibilityConverter}}"
                        ItemsSource="{Binding AppInfo.CurrentMediaItem.InfoBoxPeople}"
                        ItemsPanel="{StaticResource IptHorizontalStackPanel}"
                        ItemTemplate="{StaticResource DtInfoBoxStatusBar}" />

          <!-- Keywords -->
          <ItemsControl Visibility="{Binding AppInfo.IsInfoBoxKeywordsVisible, Converter={StaticResource AllToVisibilityConverter}}"
                        ItemsSource="{Binding AppInfo.CurrentMediaItem.InfoBoxKeywords}"
                        ItemsPanel="{StaticResource IptHorizontalStackPanel}"
                        ItemTemplate="{StaticResource DtInfoBoxStatusBar}" />

          <!-- Comment -->
          <Border Visibility="{Binding AppInfo.IsCommentVisible, Converter={StaticResource AllToVisibilityConverter}}">
            <TextBlock Text="{Binding AppInfo.CurrentMediaItem.Comment}" />
          </Border>

        </WrapPanel>
      </controls:Flyout>

    </controls:FlyoutsControl>
  </controls:MetroWindow.Flyouts>


  <Grid x:Name="GridMain" Margin="0" DataContext="{x:Static pm:App.Core}">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="350" />
      <ColumnDefinition Width="3" />
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>

    <GridSplitter Grid.Column="1" DragDelta="MainSplitter_OnDragDelta" DragCompleted="MainSplitter_OnDragCompleted" 
      Width="3" HorizontalAlignment="Stretch" Background="{StaticResource WhiteBrush}" />

    <!-- Thumbnails and Full Media -->
    <Grid Grid.Column="2" >

      <!-- Thumbnails -->
      <Grid>
        <Grid.Style>
          <Style TargetType="{x:Type Grid}">
            <Setter Property="Visibility" Value="Collapsed" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding AppInfo.AppMode}" Value="0">
                <Setter Property="Visibility" Value="Visible" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>

        <!-- Thumbnails -->
        <ItemsControl x:Name="ThumbsBox" ItemsSource="{Binding MediaItems.SplitedItems}"
                      VirtualizingStackPanel.IsVirtualizing="True" 
                      VirtualizingPanel.ScrollUnit="Pixel" 
                      ScrollViewer.CanContentScroll="True" PreviewMouseWheel="ThumbsBox_OnPreviewMouseWheel">
          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel x:Name="ThumbsBoxStackPanel" CacheLengthUnit="Item" CacheLength="4"/>
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>

          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <ItemsControl ItemsSource="{Binding}" ItemsPanel="{StaticResource IptHorizontalStackPanel}">

                <!-- Thumbnail -->
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <Border Width="{Binding ThumbWidth}" Height="{Binding ThumbHeight}" ClipToBounds="True"
                            MouseLeftButtonUp="Thumb_OnMouseLeftButtonUp" MouseLeftButtonDown="Thumb_OnMouseLeftButtonDown" 
                            MouseMove="Thumb_OnMouseMove">
                      <Border.Style>
                        <Style TargetType="{x:Type Border}">
                          <Setter Property="BorderBrush" Value="Black" />
                          <Setter Property="BorderThickness" Value="2" />
                          <Setter Property="Margin" Value="1" />
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                              <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                            </DataTrigger>
                          </Style.Triggers>
                          <Style.Resources>
                            <Style TargetType="{x:Type ItemsControl}">
                              <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Border}, Path=IsMouseOver}" Value="True">
                                  <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding AppInfo.IsThumbInfoVisible, Source={x:Static pm:App.Core}}" Value="False">
                                  <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                              </Style.Triggers>
                            </Style>
                          </Style.Resources>
                        </Style>
                      </Border.Style>

                      <Grid>
                        <!-- Thumbnail Image -->
                        <Image Source="{Binding FilePathCacheUri, Converter={StaticResource ImageSourceConverter}}" Stretch="Fill" />

                        <!-- Video overlayer -->
                        <ContentControl Content="&#xE29E;" FontFamily="Segoe UI Symbol" FontSize="20" 
                                        VerticalAlignment="Center" HorizontalAlignment="Center" Opacity="0.77">
                          <ContentControl.Style>
                            <Style>
                              <Style.Triggers>
                                <DataTrigger Binding="{Binding MediaType}" Value="0">
                                  <Setter Property="ContentControl.Visibility" Value="Hidden"/>
                                </DataTrigger>
                              </Style.Triggers>
                            </Style>
                          </ContentControl.Style>
                        </ContentControl>

                        <!-- Thumbnail Info Box -->
                        <ItemsControl ItemsSource="{Binding InfoBoxThumb}">
                          <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                              <WrapPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                          </ItemsControl.ItemsPanel>
                          <ItemsControl.ItemTemplate>
                            <DataTemplate>
                              <Border Style="{StaticResource SBorderInfoBoxThumb}">
                                <TextBlock Style="{StaticResource STextBlockInfoBox}" Text="{Binding}" />
                              </Border>
                            </DataTemplate>
                          </ItemsControl.ItemTemplate>
                        </ItemsControl>
                      </Grid>
                    </Border>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>
            </DataTemplate>
          </ItemsControl.ItemTemplate>

          <ItemsControl.Template>
            <ControlTemplate>
              <ScrollViewer x:Name="ThumbsBoxScrollViewer">
                <ItemsPresenter />
              </ScrollViewer>
            </ControlTemplate>
          </ItemsControl.Template>
        </ItemsControl>
      </Grid>

      <!-- Full Media -->
      <Grid x:Name="PanelFullScreen" Background="Transparent"
            MouseLeftButtonDown="PanelFullScreen_OnMouseLeftButtonDown" MouseWheel="PanelFullScreen_OnMouseWheel">
        <Grid.Style>
          <Style TargetType="{x:Type Grid}">
            <Setter Property="Visibility" Value="Hidden" />
            <Style.Triggers>
              <DataTrigger Binding="{Binding AppInfo.AppMode}" Value="1">
                <Setter Property="Visibility" Value="Visible" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Grid.Style>
        <Grid>

          <!-- Full Media Image -->
          <Grid>
            <Grid.Style>
              <Style TargetType="{x:Type Grid}">
                <Setter Property="Visibility" Value="Hidden" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MediaItems.Current.MediaType}" Value="0">
                    <Setter Property="Visibility" Value="Visible" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>

            <userControls:ZoomImageBox x:Name="FullImage" />
          </Grid>

          <!-- Full Media Video -->
          <Grid>
            <Grid.Style>
              <Style TargetType="{x:Type Grid}">
                <Setter Property="Visibility" Value="Hidden" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding MediaItems.Current.MediaType}" Value="1">
                    <Setter Property="Visibility" Value="Visible" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </Grid.Style>

            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <media:MediaElementWrapper x:Name="FullMedia" Grid.Row="0" Grid.RowSpan="2" LoadedBehavior="Play"
              ScrubbingEnabled="True" MediaEnded="FullMedia_OnMediaEnded" />

            <Grid Grid.Row="0" VerticalAlignment="Bottom">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>

              <Slider x:Name="ProgressSlider" Grid.Row="0" Minimum="0"
                media:Drag.PauseWhileDragging="{Binding ElementName=FullMedia}"
                IsEnabled="{Binding ElementName=FullMedia, Path=HasMedia}"
                Maximum="{Binding ElementName=FullMedia, Path=Length, Converter={x:Static media:NullableTimeSpanToSecondsConverter.Default}}"
                Style="{StaticResource {x:Static media:Styles.ProgressSliderStyleKey}}"
                Value="{Binding ElementName=FullMedia, Path=Position, Converter={x:Static media:NullableTimeSpanToSecondsConverter.Default}}" />
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </Grid>
  </Grid>
</controls:MetroWindow>
