<controls:MetroWindow x:Class="PictureManager.WMain"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:pm="clr-namespace:PictureManager"
        xmlns:uc="clr-namespace:PictureManager.UserControls"
        xmlns:cmd="clr-namespace:PictureManager.Commands"
        xmlns:cc="clr-namespace:PictureManager.CustomControls"
        xmlns:mhc="clr-namespace:MH.UI.WPF.Controls;assembly=MH.UI.WPF"
        xmlns:models="clr-namespace:PictureManager.Domain.Models;assembly=PictureManager.Domain"
        mc:Ignorable="d"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        Title="Picture Manager" TitleAlignment="Center" Height="550" Width="930" WindowState="Maximized" 
        Loaded="Window_Loaded" FontSize="13.333" SaveWindowPosition="True" TitleCharacterCasing="Normal"
        LeftWindowCommandsOverlayBehavior="Never" Closing="WMain_OnClosing"
        SizeChanged="WMain_OnSizeChanged">

  <controls:MetroWindow.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Views/MainTabsV.xaml" />
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </controls:MetroWindow.Resources>

  <controls:MetroWindow.InputBindings>
    <KeyBinding Modifiers="Control" Key="E" Command="{Binding MediaItemsVM.EditCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Modifiers="Control" Key="S" Command="{Binding MediaItemsVM.SaveEditCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Modifiers="Control" Key="Q" Command="{Binding MediaItemsVM.CancelEditCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Key="F2" Command="{Binding MediaItemsVM.RenameCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Key="Delete" Command="{Binding MediaItemsVM.DeleteCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Modifiers="Control" Key="K" Command="{Binding MediaItemsVM.CommentCommand, Source={x:Static pm:App.Ui}}" />
    <KeyBinding Modifiers="Control" Key="R" Command="{Binding MediaItemsVM.RotateCommand, Source={x:Static pm:App.Ui}}" />
  </controls:MetroWindow.InputBindings>

  <controls:MetroWindow.TitleTemplate>
    <DataTemplate>
      <Grid>
        <StackPanel Orientation="Vertical">
          <ProgressBar Width="250" Height="11" BorderThickness="1,1,1,0" DataContext="{x:Static pm:App.Ui}" 
                       Value="{Binding AppInfo.ProgressBarValueA}"
                       Maximum="{Binding AppInfo.ProgressBarMaxA}"
                       IsIndeterminate="{Binding AppInfo.ProgressBarIsIndeterminate}" />
          <ProgressBar Width="250" Height="11" BorderThickness="1,0,1,1" DataContext="{x:Static pm:App.Ui}" 
                       Value="{Binding AppInfo.ProgressBarValueB}"
                       Maximum="{Binding AppInfo.ProgressBarMaxB}"
                       IsIndeterminate="{Binding AppInfo.ProgressBarIsIndeterminate}" />
        </StackPanel>
        <TextBlock Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" HorizontalAlignment="Center"
                   Margin="8 -1 8 0" FontWeight="Bold" FontSize="{DynamicResource WindowTitleFontSize}"
                   FontFamily="{DynamicResource HeaderFontFamily}" />
      </Grid>
    </DataTemplate>
  </controls:MetroWindow.TitleTemplate>

  <controls:MetroWindow.LeftWindowCommands>
    <controls:WindowCommands>
      <Menu x:Name="MainMenu" Background="Transparent">
        <Menu.Resources>
          <mhc:Icon x:Key="EyeIcon" x:Shared="False" Source="{StaticResource IconEye}" />
        </Menu.Resources>

        <MenuItem Header="Tools" Style="{StaticResource StyleMenuItemRoot}">
          <MenuItem Command="cmd:WindowCommands.OpenSettingsCommand">
            <MenuItem.Icon>
              <mhc:Icon Source="{StaticResource IconSettings}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Command="cmd:WindowCommands.AddGeoNamesFromFilesCommand">
            <MenuItem.Icon>
              <mhc:Icon Source="{StaticResource IconLocationCheckin}" />
            </MenuItem.Icon>
          </MenuItem>
          <MenuItem Command="cmd:WindowCommands.TestButtonCommand" />
        </MenuItem>
        <MenuItem Header="Media Items" Style="{StaticResource StyleMenuItemRoot}">
          <MenuItem Header="Compress"
                    Command="{Binding ThumbnailsGridsVM.CompressCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Command="cmd:MediaItemsCommands.RebuildThumbnailsCommand" />
          <MenuItem Header="Rotate"
                    Command="{Binding MediaItemsVM.RotateCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Select Not Modified"
                    Command="{Binding ThumbnailsGridsVM.SelectNotModifiedCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Shuffle"
                    Command="{Binding ThumbnailsGridsVM.ShuffleCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Resize Images"
                    Command="{Binding ThumbnailsGridsVM.ResizeImagesCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Images to Video"
                    Command="{Binding ThumbnailsGridsVM.ImagesToVideoCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Copy Paths"
                    Command="{Binding ThumbnailsGridsVM.CopyPathsCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Command="cmd:MediaItemsCommands.CompareCommand" />
          <MenuItem Header="Rename"
                    InputGestureText="F2"
                    Command="{Binding MediaItemsVM.RenameCommand, Source={x:Static pm:App.Ui}}" />
          <MenuItem Header="Segment Matching"
                    Command="{Binding SegmentsVM.SegmentMatchingCommand, Source={x:Static pm:App.Ui}}">
            <MenuItem.Icon>
              <mhc:Icon Source="{StaticResource IconEquals}" />
            </MenuItem.Icon>
          </MenuItem>
        </MenuItem>
        <MenuItem Header="Metadata" Style="{StaticResource StyleMenuItemRoot}">
          <MenuItem Header="Edit"
                    InputGestureText="Ctrl+E"
                    Command="{Binding MediaItemsVM.EditCommand, Source={x:Static pm:App.Ui}}">
            <MenuItem.Icon>
              <mhc:Icon Source="{StaticResource IconEdit}" />
            </MenuItem.Icon>
          </MenuItem>
            <MenuItem Header="Save"
                      InputGestureText="Ctrl+S"
                      Command="{Binding MediaItemsVM.SaveEditCommand, Source={x:Static pm:App.Ui}}">
              <MenuItem.Icon>
                <mhc:Icon Source="{StaticResource IconSave}" />
              </MenuItem.Icon>
            </MenuItem>
          <MenuItem Header="Cancel"
                    InputGestureText="Ctrl+Q"
                    Command="{Binding MediaItemsVM.CancelEditCommand, Source={x:Static pm:App.Ui}}">
            <MenuItem.Icon>
              <mhc:Icon Source="{StaticResource IconCancel}" />
            </MenuItem.Icon>
          </MenuItem>
            <MenuItem Header="Comment"
                      InputGestureText="Ctrl+K"
                      Command="{Binding MediaItemsVM.CommentCommand, Source={x:Static pm:App.Ui}}">
              <MenuItem.Icon>
                <mhc:Icon Source="{StaticResource IconNotification}" />
              </MenuItem.Icon>
            </MenuItem>
          <MenuItem Header="Reload"
                    Command="{Binding MediaItemsVM.ReloadMetadataCommand, Source={x:Static pm:App.Ui}}" />
        </MenuItem>
        <MenuItem Icon="{StaticResource EyeIcon}"
                  ItemsSource="{Binding ViewersM.Items, Source={x:Static pm:App.Core}}"
                  Visibility="{Binding ViewersM.Items.Count, Source={x:Static pm:App.Core}, Converter={StaticResource AllToVisibilityConverter}}">
          
          <MenuItem.Style>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource StyleMenuItemRoot}">
              <Setter Property="Header" Value="{Binding ViewersM.Current.Name, Source={x:Static pm:App.Core}}" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding ViewersM.Current, Source={x:Static pm:App.Core}}" Value="{x:Null}">
                  <Setter Property="Header" Value="Viewer" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </MenuItem.Style>

          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource StyleBaseMenuItem}">
              <Setter Property="Header" Value="{Binding Path=(models:ViewerM.Name)}" />
              <Setter Property="Command" Value="{Binding ViewersVM.SetCurrentCommand, Source={x:Static pm:App.Ui}}" />
              <Setter Property="CommandParameter" Value="{Binding}" />
              <Setter Property="Icon" Value="{StaticResource EyeIcon}" />
            </Style>
          </MenuItem.ItemContainerStyle>
        </MenuItem>
        <MenuItem Command="cmd:WindowCommands.OpenAboutCommand" Style="{StaticResource StyleMenuItemRoot}" />
      </Menu>

      <!-- Media Items Count -->
      <TextBlock Text="{Binding MediaItemsM.MediaItemsCount, Source={x:Static pm:App.Core}}" VerticalAlignment="Center" Margin="5,0" />
      
      <!-- Filters Panel -->
      <StackPanel Orientation="Horizontal"
                  VerticalAlignment="Center"
                  Margin="0,2,2,0"
                  DataContext="{x:Static pm:App.Core}"
                  ToolTip="Clear filters"
                  Cursor="Hand">

        <StackPanel.Resources>
          <Style TargetType="{x:Type Border}" BasedOn="{StaticResource SBorderActiveFilter}" />
          <Style TargetType="{x:Type Label}" BasedOn="{StaticResource SShadowLabel}" />
        </StackPanel.Resources>

        <b:Interaction.Triggers>
          <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
            <b:InvokeCommandAction Command="{Binding ThumbnailsGridsVM.ClearFiltersCommand,
                                             Source={x:Static pm:App.Ui}}" />
          </b:EventTrigger>
        </b:Interaction.Triggers>

        <!-- And -->
        <Border Background="{StaticResource DisplayFilterAndBrush}">
          <Label Content="{Binding ThumbnailsGridsM.Current.FilterAndCount}"
                 Visibility="{Binding ThumbnailsGridsM.Current.FilterAndCount,
                              Converter={StaticResource AllToVisibilityConverter}}" />
        </Border>

        <!-- Or -->
        <Border Background="{StaticResource DisplayFilterOrBrush}">
          <Label Content="{Binding ThumbnailsGridsM.Current.FilterOrCount}"
                 Visibility="{Binding ThumbnailsGridsM.Current.FilterOrCount,
                              Converter={StaticResource AllToVisibilityConverter}}"/>
        </Border>

        <!-- Not -->
        <Border Background="{StaticResource DisplayFilterNotBrush}">
          <Label Content="{Binding ThumbnailsGridsM.Current.FilterNotCount}"
                 Visibility="{Binding ThumbnailsGridsM.Current.FilterNotCount,
                              Converter={StaticResource AllToVisibilityConverter}}"/>
        </Border>
      </StackPanel>

      <!-- Media Types -->
      <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
        <ToggleButton Style="{StaticResource StyleToggleButtonIconFlat}" ToolTip="Image" Click="OnMediaTypesChanged"
                      IsChecked="{Binding ThumbnailsGridsM.Current.ShowImages, Source={x:Static pm:App.Core}}">
          <mhc:Icon Source="{StaticResource IconImage}" />
        </ToggleButton>
        <ToggleButton Style="{StaticResource StyleToggleButtonIconFlat}" ToolTip="Video" Click="OnMediaTypesChanged"
                      IsChecked="{Binding ThumbnailsGridsM.Current.ShowVideos, Source={x:Static pm:App.Core}}">
          <mhc:Icon Source="{StaticResource IconMovieClapper}" />
        </ToggleButton>
      </StackPanel>

      <!-- DB Button -->
      <Button Height="24" Width="24" Margin="2,0,2,0" Style="{StaticResource StyleBaseButtonBase}"
              Command="cmd:WindowCommands.SaveDbCommand" Background="Transparent" BorderThickness="0"
              VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch">
        <Grid >
          <TextBlock Text="DB" VerticalAlignment="Top" />
          <Label Content="{Binding Changes, Source={x:Static pm:App.Db}}" 
                 Style="{StaticResource SShadowLabel}" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
        </Grid>
      </Button>

      <!-- Log Button -->
      <Button Background="Red" Command="cmd:WindowCommands.OpenLogCommand" Height="24" Margin="2,0,2,0"
        Visibility="{Binding Log.Count, Source={x:Static pm:App.Core}, Converter={StaticResource AllToVisibilityConverter}}">
        <StackPanel Orientation="Horizontal">
          <TextBlock Text="Log " />
          <TextBlock Text="{Binding Log.Count, Source={x:Static pm:App.Core}}" />
        </StackPanel>
      </Button>

    </controls:WindowCommands>
  </controls:MetroWindow.LeftWindowCommands>

  <controls:MetroWindow.RightWindowCommands>
    <controls:WindowCommands>
      <cc:ImageComparer x:Name="ImageComparerTool" Visibility="Collapsed" />
    </controls:WindowCommands>
  </controls:MetroWindow.RightWindowCommands>

  <Grid>
    <cc:SlidePanelsGrid x:Name="MainSlidePanelsGrid">
      <cc:SlidePanelsGrid.ContentLeft>
        <cc:SlidePanel IsOpen="True" IsPinned="True" Position="Left" Width="380" x:Name="SlidePanelMainTreeView">
          <cc:SlidePanel.Content>
            <uc:TreeViewCategories x:Name="TreeViewCategories" Background="{StaticResource ColorBrushBackground}" />
          </cc:SlidePanel.Content>
        </cc:SlidePanel>
      </cc:SlidePanelsGrid.ContentLeft>

      <cc:SlidePanelsGrid.ContentMiddle>
        <Grid x:Name="GridMain" Margin="0" DataContext="{x:Static pm:App.Ui}">
          <!-- Main Tabs -->
          <ContentPresenter Content="{Binding MainTabsVM}"
                            Visibility="{Binding AppInfo.AppMode, Source={x:Static pm:App.Ui},
                                          Converter={StaticResource AllToVisibilityConverter}, 
                                          ConverterParameter={x:Static pm:AppMode.Browser}}" />

          <!-- MediaViewer -->
          <uc:MediaViewer x:Name="MediaViewer"
            Visibility="{Binding AppInfo.AppMode, 
              Source={x:Static pm:App.Ui},
              Converter={StaticResource AllToVisibilityConverter}, 
              ConverterParameter={x:Static pm:AppMode.Viewer}}"/>
          
        </Grid>
      </cc:SlidePanelsGrid.ContentMiddle>
      
      <cc:SlidePanelsGrid.ContentRight>
        <cc:SlidePanel Position="Right" Width="340" Margin="0,0,-340,0" x:Name="RightSlidePanel">
          <cc:SlidePanel.Content>
            <Grid>
              <uc:ToolsTabs x:Name="ToolsTabs" />
              
              <!-- Pin Button -->
              <mhc:IconToggleButton Source="{StaticResource IconPin}"
                                    Size="14"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Top"
                                    IsChecked="{Binding IsPinned, ElementName=RightSlidePanel}"
                                    ToolTip="Pin panel" />
            </Grid>
          </cc:SlidePanel.Content>
        </cc:SlidePanel>
      </cc:SlidePanelsGrid.ContentRight>
    </cc:SlidePanelsGrid>

    <!-- Status Panel -->
    <uc:StatusPanel x:Name="StatusPanel" VerticalContentAlignment="Bottom" />
  </Grid>
  
</controls:MetroWindow>
