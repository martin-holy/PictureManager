<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:pm="clr-namespace:PictureManager"
  xmlns:m="clr-namespace:PictureManager.Domain.Models;assembly=PictureManager.Domain"
  xmlns:mim="clr-namespace:PictureManager.Domain.Models.MediaItems;assembly=PictureManager.Domain"
  xmlns:pmConv="clr-namespace:PictureManager.Converters"
  xmlns:mhc="clr-namespace:MH.UI.WPF.Controls;assembly=MH.UI.WPF"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:wpfu="clr-namespace:MH.UI.WPF.Utils;assembly=MH.UI.WPF"
  xmlns:mhConv="clr-namespace:MH.UI.WPF.Converters;assembly=MH.UI.WPF">

  <ResourceDictionary.MergedDictionaries>
    <wpfu:CachedResourceDictionary Source="SegmentsRectsV.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <DataTemplate DataType="{x:Type m:MediaViewerM}">
    <Grid
      x:Name="Root"
      Background="Transparent"
      Focusable="True"
      FocusVisualStyle="{x:Null}"
      Visibility="{Binding IsVisible, Converter={mhConv:AllToVisibilityConverter}}">

      <Grid.InputBindings>
        <KeyBinding Key="Right" Command="{Binding NextCommand}"/>
        <KeyBinding Key="Left" Command="{Binding PreviousCommand}"/>
        <KeyBinding Modifiers="Control" Key="P" Command="{Binding PresentationPanel.PresentationCommand}"/>
      </Grid.InputBindings>

      <b:Interaction.Triggers>
        <b:EventTrigger EventName="MouseWheel">
          <b:InvokeCommandAction
            Command="{Binding NavigateCommand}"
            EventArgsConverter="{mhConv:MouseWheelConverter}"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseDown">
          <b:InvokeCommandAction
            Command="{Binding SegmentsRectsVM.CreateCommand, Source={x:Static pm:App.Ui}}"
            PassEventArgsToCommand="True"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseMove">
          <b:InvokeCommandAction
            Command="{Binding SegmentsRectsVM.EditCommand, Source={x:Static pm:App.Ui}}"
            PassEventArgsToCommand="True"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseUp">
          <b:InvokeCommandAction
            Command="{Binding SegmentsRectsVM.EndEditCommand, Source={x:Static pm:App.Ui}}"/>
        </b:EventTrigger>
      </b:Interaction.Triggers>

      <mhc:ZoomAndPan
        x:Name="zoom"
        ContentWidth="{Binding ContentWidth, Mode=TwoWay}"
        ContentHeight="{Binding ContentHeight, Mode=TwoWay}"
        MinAnimationDuration="{Binding PresentationPanel.MinAnimationDuration}"
        IsAnimationOn="{Binding PresentationPanel.IsAnimationOn, Mode=TwoWay}"
        ReScaleToFit="{Binding ReScaleToFit, Mode=TwoWay}"
        ScaleX="{Binding Scale, Mode=TwoWay}">
        
        <Grid>
          <!-- Image -->
          <Image
            x:Name="image"
            Source="{Binding Current, Converter={pmConv:MediaViewerImageSourceConverter}}"
            Width="{Binding ContentWidth}"
            Height="{Binding ContentHeight}"
            Visibility="Collapsed"/>

          <!-- Video -->
          <mhc:MediaPlayer
            x:Name="player"
            Visibility="Collapsed">

            <FrameworkElement.LayoutTransform>
              <TransformGroup>
                <RotateTransform Angle="{Binding Current.RotationAngle}"/>
              </TransformGroup>
            </FrameworkElement.LayoutTransform>

            <b:Interaction.Triggers>
              <b:EventTrigger EventName="Loaded">
                <b:InvokeCommandAction
                  Command="pm:AppCore.MediaPlayerLoadedCommand"
                  PassEventArgsToCommand="True"/>
              </b:EventTrigger>
            </b:Interaction.Triggers>
          </mhc:MediaPlayer>
        </Grid>
      </mhc:ZoomAndPan>

      <!-- Segments Rects -->
      <Canvas>
        <ContentPresenter
          HorizontalAlignment="Left"
          VerticalAlignment="Top"
          Content="{Binding SegmentsRectsVM, Source={x:Static pm:App.Ui}}">

          <ContentPresenter.RenderTransform>
            <TranslateTransform
              X="{Binding ElementName=zoom, Path=TransformX}"
              Y="{Binding ElementName=zoom, Path=TransformY}"/>
          </ContentPresenter.RenderTransform>
        </ContentPresenter>
      </Canvas>
    </Grid>

    <DataTemplate.Triggers>
      <Trigger SourceName="Root" Property="IsMouseOver" Value="True">
        <Setter
          TargetName="Root"
          Property="FocusManager.FocusedElement"
          Value="{Binding RelativeSource={RelativeSource Self}}"/>
      </Trigger>
      <DataTrigger
        Binding="{Binding Current, Converter={mhConv:DataTypeConverter},
                  ConverterParameter={x:Type mim:ImageM}}"
        Value="True">
        <Setter TargetName="image" Property="Visibility" Value="Visible"/>
      </DataTrigger>
      <DataTrigger
        Binding="{Binding Current, Converter={mhConv:DataTypeConverter},
                  ConverterParameter={x:Type mim:VideoM}}"
        Value="True">
        <Setter TargetName="player" Property="Visibility" Value="Visible"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
</ResourceDictionary>