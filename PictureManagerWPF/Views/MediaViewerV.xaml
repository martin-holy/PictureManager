<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:vm="clr-namespace:PictureManager.ViewModels"
  xmlns:pmd="clr-namespace:PictureManager.Domain;assembly=PictureManager.Domain"
  xmlns:mhc="clr-namespace:MH.UI.WPF.Controls;assembly=MH.UI.WPF"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="SegmentsRectsV.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <DataTemplate DataType="{x:Type vm:MediaViewerVM}">
    <Grid
      x:Name="Root"
      Background="Transparent"
      Focusable="True"
      FocusVisualStyle="{x:Null}"
      Visibility="{Binding Model.IsVisible, Converter={StaticResource AllToVisibilityConverter}}">

      <Grid.Style>
        <Style TargetType="{x:Type Grid}">
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter
                Property="FocusManager.FocusedElement"
                Value="{Binding RelativeSource={RelativeSource Self}}"/>
            </Trigger>
          </Style.Triggers>
        </Style>
      </Grid.Style>

      <Grid.InputBindings>
        <KeyBinding Key="Right" Command="{Binding Model.NextCommand}"/>
        <KeyBinding Key="Left" Command="{Binding Model.PreviousCommand}"/>
        <KeyBinding Modifiers="Control" Key="P" Command="{Binding Model.PresentationPanel.PresentationCommand}"/>
      </Grid.InputBindings>

      <b:Interaction.Triggers>
        <b:EventTrigger EventName="MouseWheel">
          <b:InvokeCommandAction
            Command="{Binding NavigateCommand}"
            PassEventArgsToCommand="True"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseDown">
          <b:InvokeCommandAction
            Command="{Binding CoreVM.SegmentsVM.SegmentsRectsVM.CreateCommand}"
            PassEventArgsToCommand="True"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseMove">
          <b:InvokeCommandAction
            Command="{Binding CoreVM.SegmentsVM.SegmentsRectsVM.EditCommand}"
            PassEventArgsToCommand="True"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="PreviewMouseUp">
          <b:InvokeCommandAction
            Command="{Binding CoreVM.SegmentsVM.SegmentsRectsVM.EndEditCommand}"/>
        </b:EventTrigger>
      </b:Interaction.Triggers>

      <mhc:ZoomAndPan
        x:Name="zoom"
        ContentWidth="{Binding Model.ContentWidth, Mode=TwoWay}"
        ContentHeight="{Binding Model.ContentHeight, Mode=TwoWay}"
        MinAnimationDuration="{Binding Model.PresentationPanel.MinAnimationDuration}"
        IsAnimationOn="{Binding Model.PresentationPanel.IsAnimationOn, Mode=TwoWay}"
        ReScaleToFit="{Binding Model.ReScaleToFit, Mode=TwoWay}">

        <b:Interaction.Triggers>
          <b:PropertyChangedTrigger Binding="{Binding ElementName=zoom, Path=ScaleX}">
            <b:InvokeCommandAction
              Command="{Binding CoreVM.SegmentsVM.SegmentsM.SegmentsRectsM.UpdateScaleCommand}"
              CommandParameter="{Binding ElementName=zoom, Path=ScaleX}"/>
            <b:InvokeCommandAction
              Command="{Binding Model.UpdateActualZoomCommand}"
              CommandParameter="{Binding ElementName=zoom, Path=ScaleX}"/>
          </b:PropertyChangedTrigger>
        </b:Interaction.Triggers>

        <Grid>
          <!-- Image -->
          <Image
            x:Name="image"
            Source="{Binding ImageSource}"
            Width="{Binding Model.ContentWidth}"
            Height="{Binding Model.ContentHeight}"
            Visibility="{Binding Model.Current.MediaType,
                         Converter={StaticResource AllToVisibilityConverter},
                         ConverterParameter={x:Static pmd:MediaType.Image}}"/>

          <!-- Video -->
          <mhc:MediaPlayer
            x:Name="player"
            LoadedBehavior="Manual"
            UnloadedBehavior="Stop"
            ScrubbingEnabled="True"
            Stretch="Uniform"
            StretchDirection="Both"
            Volume="{Binding ElementName=controlPanel, Path=Volume}"
            Speed="{Binding ElementName=controlPanel, Path=Speed}"
            IsMuted="{Binding Model.MediaPlayerM.IsMuted}"
            Visibility="{Binding Model.Current.MediaType,
                         Converter={StaticResource AllToVisibilityConverter}, 
                         ConverterParameter={x:Static pmd:MediaType.Video}}">

            <FrameworkElement.LayoutTransform>
              <TransformGroup>
                <RotateTransform Angle="{Binding Model.Current.RotationAngle}"/>
              </TransformGroup>
            </FrameworkElement.LayoutTransform>

            <b:Interaction.Triggers>
              <b:EventTrigger EventName="Loaded">
                <b:InvokeCommandAction
                  Command="{Binding MediaPlayerLoadedCommand}"
                  PassEventArgsToCommand="True"/>
              </b:EventTrigger>
              <b:EventTrigger EventName="MediaOpened">
                <b:InvokeCommandAction
                  Command="{Binding Model.MediaPlayerM.MediaOpenedCommand}"
                  PassEventArgsToCommand="True"/>
              </b:EventTrigger>
              <b:EventTrigger EventName="MediaEnded">
                <b:InvokeCommandAction
                  Command="{Binding Model.MediaPlayerM.MediaEndedCommand}"
                  PassEventArgsToCommand="True"/>
              </b:EventTrigger>
            </b:Interaction.Triggers>
          </mhc:MediaPlayer>
        </Grid>
      </mhc:ZoomAndPan>

      <!-- Media Player Control Panel -->
      <mhc:MediaPlayerControlPanel
        Grid.Row="1"
        x:Name="controlPanel"
        Player="{Binding ElementName=player}"
        Height="30"
        TimelinePosition="{Binding Model.MediaPlayerM.TimelinePosition, Mode=TwoWay}"
        TimelineMaximum="{Binding Model.MediaPlayerM.TimelineMaximum, Mode=TwoWay}"
        TimelineSmallChange="{Binding Model.MediaPlayerM.TimelineSmallChange}"
        TimelineLargeChange="{Binding Model.MediaPlayerM.TimelineLargeChange}"
        Volume="{Binding Model.MediaPlayerM.Volume}"
        Speed="{Binding Model.MediaPlayerM.Speed}"
        IsPlaying="{Binding Model.MediaPlayerM.IsPlaying}"
        SourcePath="{Binding Model.MediaPlayerM.Source}"
        Background="#33000000"
        VerticalAlignment="Top"
        Visibility="{Binding Model.Current.MediaType,
                     Converter={StaticResource AllToVisibilityConverter}, 
                     ConverterParameter={x:Static pmd:MediaType.Video}}"/>

      <!-- Segments Rects -->
      <ContentPresenter
        HorizontalAlignment="Left"
        VerticalAlignment="Top"
        Content="{Binding CoreVM.SegmentsVM.SegmentsRectsVM}"
        Width="{Binding ElementName=image, Path=ActualWidth}"
        Height="{Binding ElementName=image, Path=ActualHeight}">

        <ContentPresenter.RenderTransform>
          <TranslateTransform
            X="{Binding ElementName=zoom, Path=TransformX}"
            Y="{Binding ElementName=zoom, Path=TransformY}"/>
        </ContentPresenter.RenderTransform>
      </ContentPresenter>
    </Grid>
  </DataTemplate>
</ResourceDictionary>