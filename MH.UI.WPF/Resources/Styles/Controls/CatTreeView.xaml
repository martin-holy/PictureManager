<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mhuic="clr-namespace:MH.UI.WPF.Controls"
  xmlns:mhuiu="clr-namespace:MH.UI.WPF.Utils">

  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

  <Style x:Key="ExpandCollapseToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Foreground" Value="{StaticResource MH.Brushes.Foreground}"/>
    <Setter Property="Height" Value="16"/>
    <Setter Property="Width" Value="16"/>
    <Setter Property="Margin" Value="1"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Margin="{TemplateBinding Margin}" Background="Transparent">
            <Path
              x:Name="path"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="{StaticResource TreeArrow}" 
              Fill="{TemplateBinding Background}"
              Stroke="{TemplateBinding Foreground}">
              <Path.RenderTransform>
                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
              </Path.RenderTransform>
            </Path>
          </Grid>
          
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="path" Property="Fill" Value="{StaticResource MH.Brushes.Foreground}"/>
              <Setter TargetName="path" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" Value="{StaticResource ControlIsNotEnabledOpacity}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="path" Property="Fill" Value="{StaticResource MH.Brushes.Accent}"/>
              <Setter TargetName="path" Property="Stroke" Value="{StaticResource MH.Brushes.Accent}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="TreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle
            Margin="0"
            Opacity="0"
            SnapsToDevicePixels="True"
            StrokeDashArray="1 2"
            StrokeThickness="5"
            Stroke="{StaticResource MH.Brushes.Foreground}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MH.Styles.Controls.TreeViewItem" TargetType="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="{StaticResource MH.Control.Static.Background}"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{StaticResource MH.Control.Static.Text}"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment,Mode=OneWay,FallbackValue=Stretch,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment,Mode=OneWay,FallbackValue=Stretch,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="MinHeight" Value="25"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <StackPanel>
            <Border
              x:Name="Border"
              MinHeight="{TemplateBinding MinHeight}"
              Padding="{TemplateBinding Padding}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

              <Grid VerticalAlignment="Stretch" Background="Transparent">
                <ContentPresenter
                  x:Name="PART_Header"
                  ContentSource="Header"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                <Grid
                  Margin="{Binding DataContext,
                           Converter={StaticResource CatTreeViewMarginConverter},
                           ConverterParameter=-18, 
                           RelativeSource={RelativeSource TemplatedParent}}">
                  
                  <ToggleButton
                    x:Name="Expander"
                    Style="{StaticResource ExpandCollapseToggleButton}"
                    IsChecked="{Binding IsExpanded,
                                RelativeSource={RelativeSource TemplatedParent},
                                Mode=TwoWay}"/>
                </Grid>
              </Grid>
            </Border>
            
            <ItemsPresenter
              x:Name="ItemsHost"
              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
          </StackPanel>

          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Control.Selected.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Control.Selected.Border}"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsHidden}" Value="True">
              <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="True"/>
                <Condition Property="IsSelectionActive" Value="True"/>
              </MultiTrigger.Conditions>
              <!--TODO zjistit kdy se to deje a jak to vypada-->
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Control.Selected.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Control.Selected.Border}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="Border" Property="IsMouseOver" Value="True"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Control.Highlight.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Control.Highlight.Border}"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="Border" Property="IsMouseOver" Value="True"/>
                <Condition Property="IsSelected" Value="False"/>
              </MultiTrigger.Conditions>
              <!--TODO set different color or remove condition-->
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Control.Highlight.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Control.Highlight.Border}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <!--TODO check if the effect of opacity is cumulative if parent is also disabled-->
              <Setter Property="Opacity" Value="{StaticResource ControlIsNotEnabledOpacity}"/>
            </Trigger>
            <!--<MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsEnabled" Value="False"/>
                <Condition Property="IsSelected" Value="True"/>
              </MultiTrigger.Conditions>
              <MultiTrigger.Setters>
                <Setter Property="Foreground" Value="{StaticResource DisabledSelectedForegroundBrush}"/>
                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledSelectedBackgroundBrush}"/>
              </MultiTrigger.Setters>
            </MultiTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    
    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MH.Styles.Controls.CatTreeView" TargetType="{x:Type mhuic:CatTreeView}">
    <Setter Property="Background" Value="{StaticResource MH.Control.Static.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource MH.Control.Static.Border}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MH.Styles.Controls.TreeViewItem}"/>
    <Setter Property="FocusManager.IsFocusScope" Value="True"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="mhuiu:DragDropHelper.IsDragEnabled" Value="True"/>
    <Setter Property="mhuiu:DragDropHelper.IsDropEnabled" Value="True"/>
    <Setter Property="mhuiu:DragDropHelper.CanDrag" Value="{Binding CanDragFunc, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="mhuiu:DragDropHelper.CanDrop" Value="{Binding CanDropFunc, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="mhuiu:DragDropHelper.DoDrop" Value="{Binding DoDropAction, RelativeSource={RelativeSource Self}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type mhuic:CatTreeView}">
          <ScrollViewer
            x:Name="PART_ScrollViewer"
            Focusable="False"
            Padding="{TemplateBinding Padding}" 
            CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" 
            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
            
            <ItemsPresenter x:Name="PART_ItemsPresenter"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource ControlIsNotEnabledOpacity}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>