<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:uic="clr-namespace:MH.UI.Controls;assembly=MH.UI"
  xmlns:uii="clr-namespace:MH.UI.Interfaces;assembly=MH.UI"
  xmlns:ap="clr-namespace:MH.UI.WPF.AttachedProperties"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls"
  xmlns:mhConv="clr-namespace:MH.UI.WPF.Converters"
  xmlns:u="clr-namespace:MH.UI.WPF.Utils">

  <ResourceDictionary.MergedDictionaries>
    <u:CachedResourceDictionary Source="../BaseControls/TextBlock.xaml"/>
    <u:CachedResourceDictionary Source="IconButton.xaml"/>
    <u:CachedResourceDictionary Source="PopupSlider.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <DataTemplate x:Key="MH.Styles.Controls.MediaPlayerControlPanel" DataType="uic:MediaPlayer">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition/>
        <RowDefinition/>
      </Grid.RowDefinitions>

      <Slider
        Grid.Row="0"
        Margin="2"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Center"
        IsMoveToPointEnabled="True" 
        IsTabStop="False"
        IsSnapToTickEnabled="True"
        Value="{Binding TimelinePosition}"
        Maximum="{Binding TimelineMaximum}"
        SmallChange="{Binding TimelineSmallChange}"
        LargeChange="{Binding TimelineLargeChange}"
        TickFrequency="{Binding TimelineSmallChange}">

        <b:Interaction.Triggers>
          <b:EventTrigger EventName="ValueChanged">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderValueChangedCommand}"
              EventArgsConverter="{x:Static mhConv:PropertyChangedConverter.Inst}"/>
          </b:EventTrigger>
          <b:EventTrigger EventName="PreviewMouseLeftButtonDown">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderChangeStartedCommand}"/>
          </b:EventTrigger>
          <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderChangeEndedCommand}"/>
          </b:EventTrigger>
        </b:Interaction.Triggers>
      </Slider>

      <WrapPanel
        Grid.Row="1"
        Orientation="Horizontal">

        <!-- Time -->
        <TextBlock
          Margin="5"
          VerticalAlignment="Center"
          Text="{Binding PositionSlashDuration}"/>

        <!-- Navigation buttons -->
        <StackPanel
          x:Name="navPanel"
          Orientation="Horizontal"
          Margin="4,0"
          VerticalAlignment="Center">

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.Beginning}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.Beginning}"/>

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.LargeBack}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.LargeBack}"/>

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.SmallBack}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.SmallBack}"/>

          <!-- Play/Pause -->
          <c:IconButton Command="{Binding PlayPauseToggleCommand}">
            <c:IconButton.Style>
              <Style TargetType="{x:Type c:IconButton}" BasedOn="{StaticResource MH.Styles.Controls.IconButton}">
                <Setter Property="ap:Icon.Data" Value="{StaticResource IconPlay}"/>
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                    <Setter Property="ap:Icon.Data" Value="{StaticResource IconPause}"/>
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </c:IconButton.Style>
          </c:IconButton>

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.SmallForward}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.SmallForward}"/>

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.LargeForward}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.LargeForward}"/>

          <c:IconButton
            ap:Icon.Data="{StaticResource IconTimelineShift.End}"
            Command="{Binding TimelineShiftCommand}"
            CommandParameter="{x:Static uic:TimelineShift.End}"/>

        </StackPanel>

        <!-- Speed -->
        <Slider
          Style="{StaticResource MH.Styles.Controls.PopupSlider}"
          ap:Icon.Data="{StaticResource IconSpeed}"
          ToolTip="Speed"
          Minimum="0.1"
          Maximum="3"
          TickFrequency="0.01"
          IsTabStop="False"
          VerticalAlignment="Center"
          Value="{Binding Speed}"/>

        <!-- Repeat for seconds -->
        <Slider
          Style="{StaticResource MH.Styles.Controls.PopupSlider}"
          Minimum="0"
          Maximum="10"
          Value="{Binding RepeatForSeconds, Mode=TwoWay}"
          ap:Icon.Data="{StaticResource IconTimer}"
          ToolTip="Time in seconds the video clip is repeated for"/>

        <!-- Volume -->
        <Slider
          Style="{StaticResource MH.Styles.Controls.PopupSlider}"
          ap:Icon.Data="{StaticResource IconVolume}"
          ToolTip="Volume"
          Minimum="0"
          Maximum="1"
          TickFrequency="0.01"
          IsTabStop="False"
          VerticalAlignment="Center"
          Value="{Binding Volume}"/>

        <!-- Mute -->
        <c:IconToggleButton
          ap:Icon.Data="{StaticResource IconSoundMute}"
          IsChecked="{Binding IsMuted}"
          Width="22"
          Height="22"
          ToolTip="Mute"/>

        <!-- Play type -->
        <StackPanel x:Name="playTypePanel" Orientation="Horizontal">
          <Label Target="{Binding ElementName=cmbPlayTypes}" Content="Play:"/>
          <ComboBox
            x:Name="cmbPlayTypes"
            ItemsSource="{Binding PlayTypes}"
            DisplayMemberPath="Value"
            SelectedValuePath="Key"
            SelectedValue="{Binding PlayType, Mode=TwoWay}"
            Height="26"
            Margin="0,0,2,0"/>
        </StackPanel>

        <c:IconButton Command="{Binding SetNewClipCommand}"/>
        <c:IconButton Command="{Binding SetNewImageCommand}"/>
        <c:IconButton Command="{Binding DeleteItemCommand}"/>

        <!-- Markers -->
        <Grid x:Name="markersPanel">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>

          <c:IconButton
            Grid.Column="0"
            ToolTip="Set start"
            ap:Icon.Data="{StaticResource IconChevronDown}"
            Command="{Binding SetMarkerCommand}"
            CommandParameter="{StaticResource True}"/>

          <c:IconButton
            Grid.Column="1"
            ToolTip="Seek to start"
            ap:Icon.Data="{StaticResource IconChevronRight}"
            Command="{Binding SeekToCommand}"
            CommandParameter="{StaticResource True}"/>

          <TextBlock
            Grid.Column="2"
            x:Name="tbTimeStart"
            IsEnabled="False"
            VerticalAlignment="Center"
            Text="0:00.000"/>

          <TextBlock
            Grid.Column="3"
            x:Name="tbTimeEnd"
            IsEnabled="False"
            VerticalAlignment="Center"
            Text=" - 0:00.000"/>

          <c:IconButton
            Grid.Column="4"
            ToolTip="Seek to end"
            ap:Icon.Data="{StaticResource IconChevronLeft}"
            Command="{Binding SeekToCommand}"
            CommandParameter="{StaticResource False}"/>

          <c:IconButton
            Grid.Column="5"
            ToolTip="Set end"
            ap:Icon.Data="{StaticResource IconChevronDown}"
            Command="{Binding SetMarkerCommand}"
            CommandParameter="{StaticResource False}"/>
        </Grid>
      </WrapPanel>

    </Grid>
    
    <DataTemplate.Triggers>
      <DataTrigger
        Binding="{Binding CurrentItem,
                  Converter={x:Static mhConv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type uii:IVideoImage}}" Value="True">
        <Setter
          TargetName="tbTimeStart"
          Property="Text"
          Value="{Binding Path=CurrentItem.TimeStart,
                  Converter={x:Static mhConv:TimeFormatConverter.Inst},
                  ConverterParameter=position}"/>
        <Setter TargetName="tbTimeStart" Property="IsEnabled" Value="True"/>
      </DataTrigger>

      <DataTrigger
        Binding="{Binding CurrentItem,
                  Converter={x:Static mhConv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type uii:IVideoClip}}" Value="True">
        <Setter
          TargetName="tbTimeEnd"
          Property="Text"
          Value="{Binding Path=CurrentItem.(uii:IVideoClip.TimeEnd),
                  Converter={x:Static mhConv:TimeFormatConverter.Inst},
                  ConverterParameter=position,
                  StringFormat={} - {0}}"/>
        <Setter TargetName="tbTimeEnd" Property="IsEnabled" Value="True"/>
      </DataTrigger>

      <Trigger SourceName="navPanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="navPanel" Property="Background" Value="{StaticResource MH.Item.Hover.Background}"/>
      </Trigger>

      <Trigger SourceName="playTypePanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="playTypePanel" Property="Background" Value="{StaticResource MH.Item.Hover.Background}"/>
      </Trigger>

      <Trigger SourceName="markersPanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="markersPanel" Property="Background" Value="{StaticResource MH.Item.Hover.Background}"/>
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
</ResourceDictionary>