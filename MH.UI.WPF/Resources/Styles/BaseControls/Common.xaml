<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:rd="clr-namespace:MH.UI.WPF.Resources"
  xmlns:mhc="clr-namespace:MH.UI.WPF.Controls"
  xmlns:mhConv="clr-namespace:MH.UI.WPF.Converters"
  xmlns:mhubc="clr-namespace:MH.Utils.BaseClasses;assembly=MH.Utils">

  <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle
            StrokeThickness="1"
            Stroke="{StaticResource FocusVisual.Stroke}"
            StrokeDashArray="1 2"
            SnapsToDevicePixels="True"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle
            Fill="{TemplateBinding Background}"
            Height="{TemplateBinding Height}"
            Width="{TemplateBinding Width}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,10 L5,5 z"/>

  <Style x:Key="MH.Styles.Controls.TreeExpandCollapseToggle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="HorizontalAlignment" Value="Left"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border
            x:Name="border"
            Background="Transparent"
            Padding="5"
            Width="20"
            Height="20">

            <Path
              x:Name="path"
              VerticalAlignment="Bottom"
              Data="{StaticResource TreeArrow}" 
              Fill="Transparent"
              Stroke="{StaticResource MH.Control.Static.Text}"
              Stretch="Uniform">
            </Path>
          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="path" Property="Fill" Value="{StaticResource MH.Control.Static.Text}"/>
              <Setter TargetName="path" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="45" CenterX="2" CenterY="6"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="path" Property="Fill" Value="{StaticResource MH.Brushes.Accent}"/>
              <Setter TargetName="path" Property="Stroke" Value="{StaticResource MH.Brushes.Accent}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MH.Styles.Controls.TreeViewItemBase" TargetType="TreeViewItem">
    <Setter Property="Background" Value="{StaticResource MH.Control.Static.Background}"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{StaticResource MH.Control.Static.Text}"/>
    <Setter Property="MinHeight" Value="25"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
    <!--<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>-->
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>

    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeViewItem">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>

            <ContentPresenter
              x:Name="PART_Header"
              Grid.Row="0"
              ContentSource="Header"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"/>

            <ToggleButton
              x:Name="Expander"
              Grid.Row="0"
              Margin="{Binding Converter={mhConv:TreeMarginConverter}, ConverterParameter=16}"
              Style="{StaticResource MH.Styles.Controls.TreeExpandCollapseToggle}"
              IsChecked="{Binding IsExpanded,
                          RelativeSource={RelativeSource TemplatedParent},
                          Mode=TwoWay}"/>

            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MH.Styles.Controls.TreeViewItemBaseWithSelection" TargetType="TreeViewItem">
    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>

    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel IsVirtualizing="True" VirtualizationMode="Recycling"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TreeViewItem">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>

            <Border
              x:Name="Border"
              BorderBrush="Transparent" 
              BorderThickness="1" 
              Background="{StaticResource MH.Control.Static.Background}"
              FocusVisualStyle="{x:Null}"
              MinHeight="25">

              <b:Interaction.Triggers>
                <b:EventTrigger EventName="PreviewMouseDown">
                  <b:InvokeCommandAction
                    Command="{Binding SelectItemCommand, RelativeSource=
                             {RelativeSource AncestorType=mhc:TreeViewBase}}"
                    PassEventArgsToCommand="True"/>
                </b:EventTrigger>
              </b:Interaction.Triggers>

              <Grid>
                <ContentPresenter
                  x:Name="PART_Header"
                  ContentSource="Header"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch"/>

                <ToggleButton
                  x:Name="Expander"
                  Margin="{Binding Converter={mhConv:TreeMarginConverter}, ConverterParameter=16}"
                  Style="{StaticResource MH.Styles.Controls.TreeExpandCollapseToggle}"
                  IsChecked="{Binding IsExpanded, RelativeSource=
                             {RelativeSource TemplatedParent}, Mode=TwoWay}"/>
              </Grid>
            </Border>

            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1"/>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
              <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsSelected}" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Item.SelectedNoFocus.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Item.SelectedNoFocus.Border}"/>
            </DataTrigger>
            <Trigger SourceName="Border" Property="IsMouseOver" Value="True">
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Item.Hover.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Item.Hover.Border}"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ElementName=Border, Path=IsMouseOver}" Value="True"/>
                <Condition Binding="{Binding IsSelected}" Value="True"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="Border" Property="Background" Value="{StaticResource MH.Item.SelectedHover.Background}"/>
              <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MH.Item.SelectedHover.Border}"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MH.Styles.Controls.TreeViewBase" TargetType="mhc:TreeViewBase">
    <Setter Property="Background" Value="{StaticResource MH.Control.Static.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource MH.Control.Static.Border}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource MH.Styles.Controls.TreeViewItemBase}"/>
    <Setter Property="FocusManager.IsFocusScope" Value="True"/>
    <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
    <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>

    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="mhc:TreeViewBase">
          <ScrollViewer
            x:Name="PART_ScrollViewer"
            Focusable="False"
            Padding="{TemplateBinding Padding}" 
            CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" 
            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

            <ItemsPresenter/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="BorderBrush" Value="{StaticResource MH.Control.Disabled.Border}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <HierarchicalDataTemplate
    DataType="{x:Type mhubc:TreeItem}"
    x:Key="MH.Utils.BaseClasses.TreeItem"
    ItemsSource="{Binding Items}">

    <Border
      Margin="{Binding Converter={mhConv:TreeMarginConverter}, ConverterParameter=16}"
      Padding="20,1,2,1">

      <DockPanel>
        <Path
          DockPanel.Dock="Left"
          Style="{StaticResource MH.Styles.Icon}"
          Effect="{StaticResource MH.Effects.DropShadow}"
          Data="{Binding IconName, Converter={StaticResource ResourceConverter}}"
          Fill="{Binding IconName, Converter={StaticResource ResourceConverter},
                 ConverterParameter={x:Static rd:Dictionaries.IconNameToBrush}}"/>

        <TextBlock
          Text="{Binding Name}"
          VerticalAlignment="Center"
          Margin="5,0,5,0"
          FontSize="14"
          Foreground="{StaticResource MH.Control.Static.Text}"/>
      </DockPanel>
    </Border>
  </HierarchicalDataTemplate>

</ResourceDictionary>