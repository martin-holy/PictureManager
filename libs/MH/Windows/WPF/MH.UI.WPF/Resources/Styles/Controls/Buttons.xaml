<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:ap="clr-namespace:MH.UI.WPF.AttachedProperties"
  xmlns:u="clr-namespace:MH.UI.WPF.Utils"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls">

  <ResourceDictionary.MergedDictionaries>
    <u:CachedResourceDictionary Source="IconTextBlock.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="MH.S.ButtonBase" TargetType="ButtonBase">
    <Setter Property="Background" Value="{StaticResource MH.Button.Background}"/>
    <Setter Property="BorderBrush" Value="{StaticResource MH.Control.Static.Border}"/>
    <Setter Property="Foreground" Value="{StaticResource MH.Control.Static.Foreground}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Border.CornerRadius" Value="3"/>
    <Setter Property="ap:Button.ShowBorder" Value="True"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="ap:Icon.Fill" Value="{StaticResource MH.Control.Static.Text}"/>
    <Setter Property="ap:Icon.Size" Value="18"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <Border
              x:Name="border"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              CornerRadius="{TemplateBinding Border.CornerRadius}"/>

            <Border
              x:Name="overlayer"
              BorderThickness="{TemplateBinding BorderThickness}"
              CornerRadius="{TemplateBinding Border.CornerRadius}"/>

            <ContentPresenter
              RecognizesAccessKey="True"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              Focusable="False"/>
          </Grid>

          <ControlTemplate.Triggers>
            <Trigger Property="ap:Button.ShowBorder" Value="False">
              <Setter TargetName="border" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="overlayer" Property="Background" Value="{StaticResource MH.Button.Hover.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="overlayer" Property="Background" Value="{StaticResource MH.Button.Pressed.Background}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="border" Property="BorderThickness" Value="2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource MH.Control.Disabled.Foreground}"/>
              <Setter Property="BorderBrush" Value="{StaticResource MH.Control.Disabled.Border}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static conv:RelayCommandConverter.Inst}">
            <Binding RelativeSource="{RelativeSource Self}" />
            <Binding Path="Command" RelativeSource="{RelativeSource Self}"/>
          </MultiBinding>
        </DataTrigger.Binding>
        <Setter Property="Tag" Value="{x:Null}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MH.S.Button" TargetType="Button" BasedOn="{StaticResource MH.S.ButtonBase}">
    <Setter Property="MinWidth" Value="60"/>
    <Setter Property="MinHeight" Value="30"/>
    <Setter Property="Margin" Value="5"/>
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate DataType="Button">
          <c:IconTextBlock
            DataContext="{Binding RelativeSource={RelativeSource AncestorType=Button}}"
            Background="{Binding Background}"
            Foreground="{Binding Foreground}"
            Margin="{Binding Padding}"
            ap:Text.Text="{Binding Path=(ap:Text.Text)}"
            ap:Icon.Data="{Binding Path=(ap:Icon.Data)}"
            ap:Icon.Fill="{Binding Path=(ap:Icon.Fill)}"
            ap:Icon.Size="{Binding Path=(ap:Icon.Size)}"/>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MH.S.SlimButton" TargetType="{x:Type c:SlimButton}" BasedOn="{StaticResource MH.S.Button}">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="Padding" Value="2,0,2,0"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="ap:Button.ShowBorder" Value="False"/>
  </Style>

  <Style x:Key="MH.S.IconButton" TargetType="{x:Type c:IconButton}" BasedOn="{StaticResource MH.S.Button}">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Width" Value="26"/>
    <Setter Property="Height" Value="26"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="ap:Icon.Size" Value="19"/>
    <Setter Property="ap:Button.ShowBorder" Value="False"/>
  </Style>
    
</ResourceDictionary>