<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:uic="clr-namespace:MH.UI.Controls;assembly=MH.UI"
  xmlns:uii="clr-namespace:MH.UI.Interfaces;assembly=MH.UI"
  xmlns:ap="clr-namespace:MH.UI.WPF.AttachedProperties"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters">

  <DataTemplate x:Key="MH.Styles.Controls.MediaPlayerControlPanel" DataType="uic:MediaPlayer">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition/>
        <RowDefinition/>
      </Grid.RowDefinitions>

      <Slider
        Grid.Row="0"
        Margin="2"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Center"
        IsMoveToPointEnabled="True" 
        IsTabStop="False"
        IsSnapToTickEnabled="True"
        Value="{Binding TimelinePosition}"
        Maximum="{Binding TimelineMaximum}"
        SmallChange="{Binding TimelineSmallChange}"
        LargeChange="{Binding TimelineLargeChange}"
        TickFrequency="{Binding TimelineSmallChange}">

        <b:Interaction.Triggers>
          <b:EventTrigger EventName="ValueChanged">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderValueChangedCommand}"
              EventArgsConverter="{x:Static conv:PropertyChangedConverter.Inst}"/>
          </b:EventTrigger>
          <b:EventTrigger EventName="PreviewMouseLeftButtonDown">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderChangeStartedCommand}"/>
          </b:EventTrigger>
          <b:EventTrigger EventName="PreviewMouseLeftButtonUp">
            <b:InvokeCommandAction
              Command="{Binding TimelineSliderChangeEndedCommand}"/>
          </b:EventTrigger>
        </b:Interaction.Triggers>
      </Slider>

      <WrapPanel Grid.Row="1" Orientation="Horizontal">
        <!-- Time -->
        <TextBlock Margin="5" Text="{Binding PositionSlashDuration}"/>

        <!-- Navigation buttons -->
        <StackPanel x:Name="navPanel" Orientation="Horizontal" Margin="4,0">
          <c:IconButton Command="{Binding TimelineShiftBeginningCommand}"/>
          <c:IconButton Command="{Binding TimelineShiftLargeBackCommand}"/>
          <c:IconButton Command="{Binding TimelineShiftSmallBackCommand}"/>
          <Grid>
            <c:IconButton
              Command="{Binding PlayCommand}"
              Visibility="{Binding IsPlaying, Converter={x:Static conv:VisibilityConverter.AllToCollapsed}}"/>
            <c:IconButton
              Command="{Binding PauseCommand}"
              Visibility="{Binding IsPlaying, Converter={x:Static conv:VisibilityConverter.AllToVisible}}"/>
          </Grid>
          <c:IconButton Command="{Binding TimelineShiftSmallForwardCommand}"/>
          <c:IconButton Command="{Binding TimelineShiftLargeForwardCommand}"/>
          <c:IconButton Command="{Binding TimelineShiftEndCommand}"/>
        </StackPanel>

        <!-- Speed -->
        <c:PopupSlider
          Minimum="0.1"
          Maximum="3"
          TickFrequency="0.01"
          IsTabStop="False"
          Value="{Binding Speed}">
          <c:PopupSlider.Content>
            <c:IconTextButton
              ToolTip="Speed"
              ap:Icon.Data="{StaticResource IconSpeed}"
              ap:Text.Text="{Binding Speed, StringFormat={}{0:G2}}"/>
          </c:PopupSlider.Content>
        </c:PopupSlider>

        <!-- Repeat for seconds -->
        <c:PopupSlider
          Maximum="10"
          Value="{Binding RepeatForSeconds, Mode=TwoWay}">
          <c:PopupSlider.Content>
            <c:IconTextButton
              ToolTip="Time in seconds the video clip is repeated for"
              ap:Icon.Data="{StaticResource IconTimer}"
              ap:Text.Text="{Binding RepeatForSeconds, StringFormat={}{0:G2}}"/>
          </c:PopupSlider.Content>
        </c:PopupSlider>

        <!-- Volume -->
        <c:PopupSlider
          Maximum="1"
          TickFrequency="0.01"
          IsTabStop="False"
          Value="{Binding Volume}">
          <c:PopupSlider.Content>
            <c:IconTextButton
              ToolTip="Volume"
              ap:Icon.Data="{StaticResource IconVolume}"
              ap:Text.Text="{Binding Volume, StringFormat={}{0:G2}}"/>
          </c:PopupSlider.Content>
        </c:PopupSlider>

        <!-- Mute -->
        <c:IconToggleButton
          ap:Icon.Data="{StaticResource IconSoundMute}"
          IsChecked="{Binding IsMuted}"
          Width="22"
          Height="22"
          ToolTip="Mute"/>

        <!-- Auto play -->
        <c:IconToggleButton
          ap:Icon.Data="{StaticResource IconAutoPlay}"
          IsChecked="{Binding AutoPlay}"
          ToolTip="Auto play"/>

        <!-- Play type -->
        <StackPanel x:Name="playTypePanel" Orientation="Horizontal">
          <Label Target="{Binding ElementName=cmbPlayTypes}" Content="Play:"/>
          <ComboBox
            x:Name="cmbPlayTypes"
            ItemsSource="{Binding PlayTypes}"
            DisplayMemberPath="Value"
            SelectedValuePath="Key"
            SelectedValue="{Binding PlayType, Mode=TwoWay}"
            Height="26"
            Margin="0,0,2,0"/>
        </StackPanel>

        <c:IconButton Command="{Binding SetNewClipCommand}"/>
        <c:IconButton Command="{Binding SetNewImageCommand}"/>
        <c:IconButton Command="{Binding DeleteItemCommand}"/>

        <!-- Markers -->
        <Grid x:Name="markersPanel">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>

          <c:IconButton Command="{Binding SetStartMarkerCommand}" Grid.Column="0"/>
          <c:IconButton Command="{Binding SeekToStartCommand}" Grid.Column="1"/>

          <TextBlock
            Grid.Column="2"
            x:Name="tbTimeStart"
            IsEnabled="False"
            VerticalAlignment="Center"
            Text="0:00.000"/>

          <TextBlock
            Grid.Column="3"
            x:Name="tbTimeEnd"
            IsEnabled="False"
            VerticalAlignment="Center"
            Text=" - 0:00.000"/>

          <c:IconButton Command="{Binding SeekToEndCommand}" Grid.Column="4"/>
          <c:IconButton Command="{Binding SetEndMarkerCommand}" Grid.Column="5"/>
        </Grid>
      </WrapPanel>

    </Grid>
    
    <DataTemplate.Triggers>
      <DataTrigger
        Binding="{Binding CurrentItem,
                  Converter={x:Static conv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type uii:IVideoItem}}" Value="True">
        <Setter
          TargetName="tbTimeStart"
          Property="Text"
          Value="{Binding Path=CurrentItem.TimeStart,
                  Converter={x:Static conv:TimeFormatConverter.Inst},
                  ConverterParameter=position}"/>
        <Setter TargetName="tbTimeStart" Property="IsEnabled" Value="True"/>
      </DataTrigger>

      <DataTrigger
        Binding="{Binding CurrentItem,
                  Converter={x:Static conv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type uii:IVideoClip}}" Value="True">
        <Setter
          TargetName="tbTimeEnd"
          Property="Text"
          Value="{Binding Path=CurrentItem.(uii:IVideoClip.TimeEnd),
                  Converter={x:Static conv:TimeFormatConverter.Inst},
                  ConverterParameter=position,
                  StringFormat={} - {0}}"/>
        <Setter TargetName="tbTimeEnd" Property="IsEnabled" Value="True"/>
      </DataTrigger>

      <Trigger SourceName="navPanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="navPanel" Property="Background" Value="{StaticResource MH.B.I.Hover.Ba}"/>
      </Trigger>

      <Trigger SourceName="playTypePanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="playTypePanel" Property="Background" Value="{StaticResource MH.B.I.Hover.Ba}"/>
      </Trigger>

      <Trigger SourceName="markersPanel" Property="IsMouseOver" Value="True">
        <Setter TargetName="markersPanel" Property="Background" Value="{StaticResource MH.B.I.Hover.Ba}"/>
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
</ResourceDictionary>