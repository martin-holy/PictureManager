<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:ap="clr-namespace:MH.UI.WPF.AttachedProperties"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls">

  <Style x:Key="MH.S.ButtonBase" TargetType="ButtonBase">
    <Setter Property="Background" Value="{StaticResource MH.B.Button.Static.Ba}"/>
    <Setter Property="BorderBrush" Value="{StaticResource MH.B.C.Static.Bo}"/>
    <Setter Property="Foreground" Value="{StaticResource MH.B.C.Static.Fo}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Border.CornerRadius" Value="3"/>
    <Setter Property="Padding" Value="2,0,2,0"/>
    <Setter Property="c:IconTextBlock.Shadow" Value="Icon"/>
    <Setter Property="ap:Icon.Size" Value="18"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ButtonBase">
          <Border
            DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            CornerRadius="{TemplateBinding Border.CornerRadius}">

            <Border
              BorderThickness="0"
              Background="{Binding Path=(ap:Button.OverLayer)}"
              CornerRadius="{TemplateBinding Border.CornerRadius}">

              <c:IconTextBlock
                Focusable="False"
                Foreground="{Binding Foreground}"
                Margin="{Binding Padding}"
                Shadow="{Binding Path=(c:IconTextBlock.Shadow)}"
                ap:Text.Text="{Binding Path=(ap:Text.Text)}"
                ap:Icon.Data="{Binding Path=(ap:Icon.Data)}"
                ap:Icon.Fill="{Binding Path=(ap:Icon.Fill)}"
                ap:Icon.Size="{Binding Path=(ap:Icon.Size)}"
                Compact="{Binding Path=(c:IconTextBlock.Compact)}"/>
            </Border>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="ap:Button.OverLayer" Value="{StaticResource MH.B.Button.Hover.Ba}"/>
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter Property="ap:Button.OverLayer" Value="{StaticResource MH.B.Button.Hover.Ba}"/>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="ap:Button.OverLayer" Value="{StaticResource MH.B.Button.Pressed.Ba}"/>
      </Trigger>
      <StaticResource ResourceKey="MH.Trigger.Control-Disabled"/>
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <MultiBinding Converter="{x:Static conv:RelayCommandConverter.Inst}">
            <Binding RelativeSource="{RelativeSource Self}" />
            <Binding Path="Command" RelativeSource="{RelativeSource Self}"/>
          </MultiBinding>
        </DataTrigger.Binding>
        <Setter Property="Tag" Value="{x:Null}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=(ap:Icon.Fill), RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
        <Setter Property="ap:Icon.Fill" Value="{StaticResource MH.B.C.Static.Fo}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MH.S.DialogButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource MH.S.ButtonBase}">
    <Setter Property="MinWidth" Value="60"/>
    <Setter Property="MinHeight" Value="30"/>
    <Setter Property="Margin" Value="5"/>
  </Style>

  <Style x:Key="MH.S.IconButtonBase" TargetType="ButtonBase" BasedOn="{StaticResource MH.S.ButtonBase}">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="Padding" Value="0"/>
    <Setter Property="Width" Value="26"/>
    <Setter Property="Height" Value="26"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="ap:Icon.Size" Value="19"/>
  </Style>

  <Style x:Key="MH.S.Button" TargetType="Button" BasedOn="{StaticResource MH.S.DialogButtonBase}"/>

  <Style x:Key="MH.S.ToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource MH.S.DialogButtonBase}">
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Background" Value="{StaticResource MH.B.ToggleButton.Checked.Ba}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MH.S.IconToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource MH.S.IconButtonBase}">
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="ap:Icon.Fill" Value="{StaticResource MH.B.IconToggleButton.Unchecked.Fill}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MH.S.SlimButton" TargetType="{x:Type c:SlimButton}" BasedOn="{StaticResource MH.S.ButtonBase}">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="c:IconTextBlock.Shadow" Value="Both"/>
  </Style>

  <Style x:Key="MH.S.IconButton" TargetType="{x:Type c:IconButton}" BasedOn="{StaticResource MH.S.IconButtonBase}"/>

  <Style x:Key="MH.S.IconTextButton" TargetType="{x:Type c:IconTextButton}" BasedOn="{StaticResource MH.S.IconButtonBase}">
    <Setter Property="c:IconTextBlock.Compact" Value="True"/>
    <Setter Property="c:IconTextBlock.Shadow" Value="Both"/>
    <Setter Property="ap:Icon.Size" Value="15"/>
  </Style>
    
</ResourceDictionary>