<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls;assembly=MH.UI.WPF"
  xmlns:u="clr-namespace:MH.Utils;assembly=MH.Utils"
  xmlns:pm="clr-namespace:PictureManager.Windows.WPF"
  xmlns:ap="clr-namespace:MH.UI.WPF.AttachedProperties;assembly=MH.UI.WPF"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters;assembly=MH.UI.WPF"
  xmlns:vm="clr-namespace:PictureManager.Common.ViewModels;assembly=PictureManager.Common"
  xmlns:vme="clr-namespace:PictureManager.Common.ViewModels.Entities;assembly=PictureManager.Common">

  <DataTemplate DataType="{x:Type vm:ToolBarVM}">
    <Grid DataContext="{x:Static pm:App.Core}">
      <StackPanel
        Orientation="Horizontal"
        HorizontalAlignment="Stretch"
        Height="30"
        Background="{DynamicResource MH.B.Black2}">

        <Grid Width="180">
          <Grid.Background>
            <LinearGradientBrush>
              <GradientStop Offset="0" Color="{DynamicResource MH.Color.Accent}"/>
              <GradientStop Offset="1" Color="Transparent"/>
            </LinearGradientBrush>
          </Grid.Background>
          
          <!-- Progress bar -->
          <ContentPresenter Content="{Binding VM.TitleProgressBar}"/>

          <Grid
            Background="Transparent"
            c:CustomWindow.IsDragAreaFor="{Binding RelativeSource={RelativeSource AncestorType=c:CustomWindow}}">
            
            <!-- App Icon -->
            <Path
              Style="{StaticResource MH.S.Icon.Shadow}"
              Data="{StaticResource IconImage}"
              Margin="5,0,0,0"
              HorizontalAlignment="Left"/>

            <!-- App Title -->
            <TextBlock
              Text="Picture Manager"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"
              FontWeight="Bold"
              Effect="{StaticResource MH.Effects.DropShadow}"/>
          </Grid>

          <!-- Main Menu -->
          <ContentPresenter
            ContentTemplate="{StaticResource PM.DT.MainMenu}"
            HorizontalAlignment="Right"
            VerticalAlignment="Center"/>
        </Grid>

        <StackPanel Orientation="Horizontal">
          <StackPanel.Resources>
            <Style
              TargetType="{x:Type Separator}"
              BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
              <Setter Property="Height" Value="15"/>
            </Style>
          </StackPanel.Resources>

          <!-- Plugins Menu -->
          <ContentPresenter
            Content="{Binding Inst.Plugins, Mode=OneTime}"
            ContentTemplate="{StaticResource MH.DT.PluginsMenu}"
            VerticalAlignment="Center"
            Visibility="{Binding Plugins.Count, Source={x:Static pm:App.Core}, Converter={x:Static conv:AllToVisibilityConverter.Inst}}"/>

          <!-- Viewers -->
          <ContentPresenter ContentTemplate="{StaticResource Views.ViewersToolBarV}" VerticalAlignment="Center"/>

          <Separator/>

          <!-- Media Items Count -->
          <c:IconTextBlock
            ap:Icon.Data="{StaticResource IconImageMultiple}"
            ap:Text.Text="{Binding VM.MediaItem.ItemsCount}"/>

          <c:IconTextButton Command="vm:CoreVM.SaveDbCommand" ap:Text.Text="{Binding R.Changes}"/>

          <!-- Log Button -->
          <c:IconTextButton
            Command="vm:CoreVM.OpenLogCommand"
            ap:Text.Text="{Binding Path=(u:Log.Items).Count}"
            Visibility="{Binding Path=(u:Log.Items).Count, Converter={x:Static conv:AllToVisibilityConverter.Inst}}"/>

          <Separator/>

          <!-- Segments ToolBar -->
          <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
            <c:IconToggleButton
              ToolTip="Segments edit"
              IsThreeState="False"
              VerticalAlignment="Center"
              ap:Icon.Data="{StaticResource IconPeople}"
              IsChecked="{Binding S.Segment.Rect.AreVisible}"/>

            <c:IconButton Command="vm:SegmentsDrawerVM.OpenCommand"/>
            <c:IconButton Command="vm:SegmentsDrawerVM.AddSelectedCommand"/>
            <c:IconButton Command="vm:CoreVM.OpenSegmentsMatchingCommand"/>
            <c:IconButton Command="vme:SegmentVM.SetSelectedAsUnknownCommand"/>
          </StackPanel>

          <Separator/>

          <c:IconButton Command="vm:ToolsTabsVM.OpenPeopleTabCommand"/>
          <c:IconButton Command="vme:MediaItemVM.LoadByPeopleOrSegmentsCommand"/>
          
          <!-- Presentation ToolBar -->
          <StackPanel
            VerticalAlignment="Center"
            Orientation="Horizontal"
            DataContext="{Binding VM.MediaViewer.PresentationPanel}"
            Visibility="{Binding VM.MediaViewer.IsVisible, Source={x:Static pm:App.Core}, Converter={x:Static conv:AllToVisibilityConverter.Inst}}">

            <Separator/>
            
            <!-- Play/Stop -->
            <Grid>
              <c:IconButton
                Command="vm:PresentationPanelVM.StartPresentationCommand"
                Visibility="{Binding IsRunning, Converter={x:Static conv:VisibilityConverter.AllToCollapsed}}"/>
              <c:IconButton
                Command="vm:PresentationPanelVM.StopPresentationCommand"
                Visibility="{Binding IsRunning, Converter={x:Static conv:VisibilityConverter.AllToVisible}}"/>
            </Grid>

            <!-- Interval -->
            <c:PopupSlider
              Minimum="1"
              Maximum="10"
              Value="{Binding Interval, Mode=TwoWay}">
              <c:PopupSlider.Content>
                <c:IconTextButton
                  ToolTip="Presentation interval"
                  ap:Icon.Data="{StaticResource IconTimer}"
                  ap:Text.Text="{Binding Interval, StringFormat={}{0:G2}}"/>
              </c:PopupSlider.Content>
            </c:PopupSlider>

            <!-- Play Panoramic Images -->
            <CheckBox
              IsChecked="{Binding PlayPanoramicImages}"
              ToolTip="Play Panoramic Images"/>
          </StackPanel>

          <!-- Media Items View -->
          <StackPanel Orientation="Horizontal">
            <StackPanel.Style>
              <Style TargetType="StackPanel">
                <Setter Property="Visibility" Value="Collapsed"/>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                      <Condition Binding="{Binding VM.MediaItem.Views.Current, Converter={x:Static conv:AllToBoolConverter.Inst}}" Value="True"/>
                      <Condition Binding="{Binding VM.MainWindow.IsInViewMode}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible"/>
                  </MultiDataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>

            <Separator/>

            <!-- Filters Panel -->
            <ContentPresenter
              Content="{Binding VM.MediaItem.Views.Current.Filter}"
              ContentTemplate="{StaticResource PM.DT.MediaItemsFilter}"/>

            <!-- Thumbnails scale -->
            <c:PopupSlider
              Minimum="0.2"
              Maximum="2"
              TickFrequency="0.1"
              SmallChange="0.1"
              LargeChange="0.2"
              Value="{Binding VM.MediaItem.Views.Current.ThumbScale, Mode=TwoWay}">
              <c:PopupSlider.Content>
                <c:IconTextButton
                  ToolTip="Thumbnails scale"
                  ap:Icon.Data="{StaticResource IconMagnify}"
                  ap:Text.Text="{Binding VM.MediaItem.Views.Current.ThumbScale, StringFormat={}{0:G2}}"/>
              </c:PopupSlider.Content>

              <b:Interaction.Triggers>
                <b:EventTrigger EventName="PopupClosedEvent">
                  <b:InvokeCommandAction Command="{Binding VM.MediaItem.Views.Current.ThumbScaleChangedCommand}"/>
                </b:EventTrigger>
              </b:Interaction.Triggers>
            </c:PopupSlider>

            <!-- Shuffle -->
            <c:IconButton Command="vm:MediaItemsViewsVM.ShuffleCommand"/>

            <!-- Sort -->
            <c:IconButton Command="vm:MediaItemsViewsVM.SortCommand"/>

            <!-- View Selected -->
            <c:IconButton Command="vme:MediaItemVM.ViewSelectedCommand"/>

            <!-- Image Comparer -->
            <c:IconButton
              Command="vm:ImageComparerVM.AverageHashCommand"
              CommandParameter="{Binding VM.MediaItem.Views.Current}"/>

            <c:IconButton
              Command="vm:ImageComparerVM.PHashCommand"
              CommandParameter="{Binding VM.MediaItem.Views.Current}"/>

            <c:PopupSlider
              Maximum="25"
              Value="{Binding VM.ImageComparer.Diff, Mode=TwoWay}">
              <c:PopupSlider.Content>
                <c:IconTextButton
                  ToolTip="Compare limit"
                  ap:Icon.Data="{StaticResource IconCompare}"
                  ap:Text.Text="{Binding VM.ImageComparer.Diff, StringFormat={}{0:G2}}"/>
              </c:PopupSlider.Content>
            </c:PopupSlider>
          </StackPanel>
        </StackPanel>
      </StackPanel>

      <Grid HorizontalAlignment="Right">
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <ContentPresenter Content="{Binding VM.MainWindow.ToolBar.SlidePanelPinButton}"/>

        <ContentPresenter
          Grid.Column="1"
          Content="{Binding RelativeSource={RelativeSource AncestorType=c:CustomWindow}}"
          ContentTemplate="{StaticResource MH.DT.CustomWindow.Buttons}"/>
      </Grid>
    </Grid>
  </DataTemplate>
</ResourceDictionary>