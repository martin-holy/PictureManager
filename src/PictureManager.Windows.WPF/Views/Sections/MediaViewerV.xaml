<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:pm="clr-namespace:PictureManager.Windows.WPF"
  xmlns:mmi="clr-namespace:PictureManager.Common.Models.MediaItems;assembly=PictureManager.Common"
  xmlns:pmConv="clr-namespace:PictureManager.Windows.WPF.Converters"
  xmlns:c="clr-namespace:MH.UI.WPF.Controls;assembly=MH.UI.WPF"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters;assembly=MH.UI.WPF"
  xmlns:vmWin="clr-namespace:PictureManager.Windows.WPF.ViewModels"
  xmlns:vm="clr-namespace:PictureManager.Common.ViewModels;assembly=PictureManager.Common">

  <DataTemplate DataType="{x:Type vm:MediaViewerVM}">
    <Grid
      x:Name="Root"
      Background="Transparent"
      Focusable="True"
      FocusVisualStyle="{x:Null}"
      Visibility="{Binding IsVisible, Converter={x:Static conv:VisibilityConverter.TrueToVisible}}">

      <Grid.InputBindings>
        <KeyBinding Key="Right" Command="{Binding NextCommand}"/>
        <KeyBinding Key="Left" Command="{Binding PreviousCommand}"/>
        <KeyBinding Modifiers="Control" Key="P" Command="vm:PresentationPanelVM.StartPresentationCommand"/>
      </Grid.InputBindings>

      <b:Interaction.Triggers>
        <b:EventTrigger EventName="MouseWheel">
          <b:InvokeCommandAction
            Command="{Binding NavigateCommand}"
            EventArgsConverter="{x:Static conv:MouseWheelConverter.Inst}"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="PreviewMouseDown">
          <b:InvokeCommandAction Command="vmWin:SegmentRectVM.CreateCommand" PassEventArgsToCommand="True"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="PreviewMouseMove">
          <b:InvokeCommandAction Command="vmWin:SegmentRectVM.EditCommand" PassEventArgsToCommand="True"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="PreviewMouseUp">
          <b:InvokeCommandAction Command="vmWin:SegmentRectVM.EndEditCommand"/>
        </b:EventTrigger>
      </b:Interaction.Triggers>

      <c:ZoomAndPan
        x:Name="zoom"
        ContentWidth="{Binding ContentWidth, Mode=TwoWay}"
        ContentHeight="{Binding ContentHeight, Mode=TwoWay}"
        MinAnimationDuration="{Binding PresentationPanel.MinAnimationDuration}"
        IsAnimationOn="{Binding PresentationPanel.IsAnimationOn, Mode=TwoWay}"
        ReScaleToFit="{Binding ReScaleToFit, Mode=TwoWay}"
        ScaleX="{Binding Scale, Mode=TwoWay}">
        
        <Grid>
          <!-- Image -->
          <Image
            x:Name="image"
            Source="{Binding Current, Converter={x:Static pmConv:MediaViewerImageSourceConverter.Inst}}"
            Width="{Binding ContentWidth}"
            Height="{Binding ContentHeight}"
            Visibility="Collapsed"/>

          <!-- Video -->
          <ContentControl
            x:Name="player"
            Content="{Binding Path=VM.UiFullVideo, Source={x:Static pm:App.Core}}"
            Visibility="Collapsed">

            <FrameworkElement.LayoutTransform>
              <TransformGroup>
                <RotateTransform Angle="{Binding
                  Current.Orientation,
                  Converter={x:Static pmConv:OrientationToAngleConverter.Inst}}"/>
              </TransformGroup>
            </FrameworkElement.LayoutTransform>
          </ContentControl>
        </Grid>
      </c:ZoomAndPan>

      <!-- Segments Rects -->
      <Canvas>
        <ContentPresenter
          HorizontalAlignment="Left"
          VerticalAlignment="Top"
          Content="{Binding SegmentRectVM, Source={x:Static pm:App.Ui}}">

          <ContentPresenter.RenderTransform>
            <TranslateTransform
              X="{Binding ElementName=zoom, Path=TransformX}"
              Y="{Binding ElementName=zoom, Path=TransformY}"/>
          </ContentPresenter.RenderTransform>
        </ContentPresenter>
      </Canvas>
    </Grid>

    <DataTemplate.Triggers>
      <Trigger SourceName="Root" Property="IsMouseOver" Value="True">
        <Setter
          TargetName="Root"
          Property="FocusManager.FocusedElement"
          Value="{Binding RelativeSource={RelativeSource Self}}"/>
      </Trigger>
      <DataTrigger
        Binding="{Binding Current, Converter={x:Static conv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type mmi:ImageM}}"
        Value="True">
        <Setter TargetName="image" Property="Visibility" Value="Visible"/>
      </DataTrigger>
      <DataTrigger
        Binding="{Binding Current, Converter={x:Static conv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type mmi:VideoM}}"
        Value="True">
        <Setter TargetName="player" Property="Visibility" Value="Visible"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
</ResourceDictionary>