<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:vm="clr-namespace:PictureManager.Windows.WPF.ViewModels"
  xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:pmConv="clr-namespace:PictureManager.Windows.WPF.Converters"
  xmlns:conv="clr-namespace:MH.UI.WPF.Converters;assembly=MH.UI.WPF"
  xmlns:ftMediaItem="clr-namespace:PictureManager.Common.Features.MediaItem;assembly=PictureManager.Common"
  xmlns:ftVideo="clr-namespace:PictureManager.Common.Features.MediaItem.Video;assembly=PictureManager.Common"
  xmlns:pm="clr-namespace:PictureManager.Common;assembly=PictureManager.Common">

  <Style x:Key="PM.S.ItemsControl.MediaItem.ThumbInfo" TargetType="ItemsControl">
    <Setter Property="Margin" Value="2"/>
    <Setter Property="ItemTemplate" Value="{StaticResource MH.DT.TextBlock.Border.RoundDark}"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel Orientation="Horizontal"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style>
          <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        </Style>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
        <Setter Property="Visibility" Value="Hidden"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <DataTemplate x:Key="PM.DT.MediaItem.Thumb" DataType="{x:Type ftMediaItem:MediaItemM}">
    <Image Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center">
      <Image.Source>
        <MultiBinding Converter="{x:Static pmConv:MediaItemThumbSourceConverter.Inst}">
          <Binding Path="FilePathCache" IsAsync="True"/>
          <Binding/>
        </MultiBinding>
      </Image.Source>
    </Image>
  </DataTemplate>

  <DataTemplate x:Key="PM.DT.MediaItem.Thumb-Fill" DataType="{x:Type ftMediaItem:MediaItemM}">
    <Image Stretch="UniformToFill" HorizontalAlignment="Center" VerticalAlignment="Center">
      <Image.Source>
        <MultiBinding Converter="{x:Static pmConv:MediaItemThumbSourceConverter.Inst}">
          <Binding Path="FilePathCache" IsAsync="True"/>
          <Binding/>
        </MultiBinding>
      </Image.Source>
    </Image>
  </DataTemplate>

  <DataTemplate x:Key="PM.DT.MediaItem.Thumb-Lite" DataType="{x:Type ftMediaItem:MediaItemM}">
    <Border
      Width="{Binding ThumbWidth}"
      Height="{Binding ThumbHeight}"
      BorderThickness="2"
      BorderBrush="Black"
      ClipToBounds="True">

      <Grid>
        <Image Stretch="Fill">
          <Image.Source>
            <MultiBinding Converter="{x:Static pmConv:MediaItemThumbSourceConverter.Inst}">
              <Binding Path="FilePathCache" IsAsync="True"/>
              <Binding/>
            </MultiBinding>
          </Image.Source>
        </Image>

        <ItemsControl
          ItemsSource="{Binding InfoBoxThumb}"
          Style="{StaticResource PM.S.ItemsControl.MediaItem.ThumbInfo}"/>
      </Grid>
    </Border>
  </DataTemplate>

  <DataTemplate x:Key="PM.DT.MediaItem.Thumb-Full" DataType="{x:Type ftMediaItem:MediaItemM}">
    <Grid x:Name="grid">
      <b:Interaction.Triggers>
        <b:EventTrigger EventName="MouseEnter">
          <b:InvokeCommandAction
            Command="vm:MediaItemVideoPreviewVM.ShowVideoPreviewCommand"
            CommandParameter="{Binding ElementName=grid}"/>
        </b:EventTrigger>

        <b:EventTrigger EventName="MouseLeave">
          <b:InvokeCommandAction Command="vm:MediaItemVideoPreviewVM.HideVideoPreviewCommand"/>
        </b:EventTrigger>
      </b:Interaction.Triggers>

      <!-- Thumbnail Image -->
      <Image Stretch="Fill">
        <Image.Source>
          <MultiBinding Converter="{x:Static pmConv:MediaItemThumbSourceConverter.Inst}">
            <Binding Path="FilePathCache" IsAsync="True"/>
            <Binding/>
          </MultiBinding>
        </Image.Source>
      </Image>

      <!-- Video over layer -->
      <Path
        x:Name="vidOverlayer"
        Style="{StaticResource MH.S.Icon.Shadow}"
        Data="{StaticResource IconPlayCircle}"
        Width="40"
        Height="40"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Visibility="Collapsed"/>

      <!-- Video Clips over layer -->
      <Path
        x:Name="vidClipsOverlayer"
        Style="{StaticResource MH.S.Icon.Shadow}"
        Data="{StaticResource IconImageMultiple}"
        Width="20"
        Height="20"
        HorizontalAlignment="Right"
        VerticalAlignment="Bottom"
        Margin="5"
        Visibility="Collapsed"/>

      <!-- Thumbnail Info Box -->
      <ItemsControl
        x:Name="info"
        ItemsSource="{Binding InfoBoxThumb}"
        Style="{StaticResource PM.S.ItemsControl.MediaItem.ThumbInfo}"/>
    </Grid>
    
    <DataTemplate.Triggers>
      <DataTrigger Value="False" Binding="{Binding MediaItem.Views.Current.ShowThumbInfo, Source={x:Static pm:Core.VM}, FallbackValue=True}">
        <Setter TargetName="info" Property="Visibility" Value="Hidden"/>
      </DataTrigger>
      
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition
            Binding="{Binding Converter={x:Static conv:DataTypeConverter.Inst},
                      ConverterParameter={x:Type ftVideo:VideoM}}"
            Value="True"/>
          <Condition Binding="{Binding Path=(ftVideo:VideoM.HasVideoItems)}" Value="True"/>
        </MultiDataTrigger.Conditions>
        <Setter TargetName="vidClipsOverlayer" Property="Visibility" Value="Visible"/>
      </MultiDataTrigger>
      
      <DataTrigger
        Binding="{Binding Converter={x:Static conv:DataTypeConverter.Inst},
                  ConverterParameter={x:Type ftVideo:VideoM}}"
        Value="True">
        <Setter TargetName="vidOverlayer" Property="Visibility" Value="Visible"/>
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
</ResourceDictionary>