<ResourceDictionary
  xmlns="https://github.com/avaloniaui"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:pm="clr-namespace:PictureManager.AvaloniaUI"
  xmlns:c="clr-namespace:MH.UI.AvaloniaUI.Controls;assembly=MH.UI.AvaloniaUI"
  xmlns:conv="clr-namespace:MH.UI.AvaloniaUI.Converters;assembly=MH.UI.AvaloniaUI"
  xmlns:ap="clr-namespace:MH.UI.AvaloniaUI.AttachedProperties;assembly=MH.UI.AvaloniaUI"
  xmlns:pmConv="clr-namespace:PictureManager.AvaloniaUI.Converters"
  xmlns:ftSegment="clr-namespace:PictureManager.Common.Features.Segment;assembly=PictureManager.Common"
  xmlns:layout="clr-namespace:PictureManager.Common.Layout;assembly=PictureManager.Common">

  <DataTemplate x:Key="PM.DT.Segment.Lite" DataType="{x:Type ftSegment:SegmentM}">
    <Border BorderThickness="1" BorderBrush="Black" Margin="1">
      <Image
        Stretch="Fill"
        Width="{Binding Source={x:Static ftSegment:SegmentVM.SegmentUiSize}}"
        Height="{Binding Source={x:Static ftSegment:SegmentVM.SegmentUiSize}}">

        <Image.Source>
          <MultiBinding Converter="{x:Static pmConv:SegmentThumbnailSourceConverter.Inst}">
            <Binding Path="FilePathCache"/>
            <Binding/>
          </MultiBinding>
        </Image.Source>
      </Image>
    </Border>
  </DataTemplate>

  <DataTemplate x:Key="PM.DT.Segment.ToolTip" DataType="{x:Type ftSegment:SegmentM}">
    <Grid MaxWidth="{Binding MediaItem.ThumbWidth}" RowDefinitions="Auto,Auto,Auto">
      <!-- MediaItem Thumbnail with Segments Rects -->
      <Grid>
        <ContentPresenter
          DataContext="{Binding MediaItem}"
          Content="{Binding}"
          ContentTemplate="{DynamicResource PM.DT.MediaItem.Thumb-Lite}"/>

        <ItemsControl
          ItemsSource="{ReflectionBinding VM.Segment.Rect.SegmentToolTipRects, Source={x:Static pm:App.Core}}">

          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <Canvas/>
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>

          <ItemsControl.ItemContainerTheme>
            <ControlTheme TargetType="{x:Type ContentPresenter}">
              <Setter Property="Canvas.Left" Value="{ReflectionBinding Item1, Mode=OneTime}"/>
              <Setter Property="Canvas.Top" Value="{ReflectionBinding Item2, Mode=OneTime}"/>
            </ControlTheme>
          </ItemsControl.ItemContainerTheme>

          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <Rectangle
                x:Name="rect"
                Width="{ReflectionBinding Item3, Mode=OneTime}"
                Height="{ReflectionBinding Item3, Mode=OneTime}" 
                StrokeThickness="1"
                Classes="shadow"
                Classes.marked="{ReflectionBinding Item4, Mode=OneTime}">

                <Rectangle.Styles>
                  <Style Selector="Rectangle">
                    <Setter Property="Stroke" Value="White"/>
                  </Style>
                  <Style Selector="Rectangle.marked">
                    <Setter Property="Stroke" Value="LimeGreen"/>
                  </Style>
                </Rectangle.Styles>
              </Rectangle>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
        </ItemsControl>

        <TextBlock
          Text="{Binding MediaItem.FileName}"
          MaxWidth="{Binding MediaItem.ThumbWidth}"
          VerticalAlignment="Bottom"
          HorizontalAlignment="Center"
          Margin="0,0,0,4"
          TextWrapping="Wrap"
          Classes="shadow"/>
      </Grid>

      <!-- Name -->
      <Border
        Grid.Row="1"
        BorderThickness="1"
        BorderBrush="Black"
        Background="{DynamicResource MH.B.Black5}"
        IsVisible="{Binding Person, Converter={x:Static conv:VisibilityConverter.NotNullToVisible}}">

        <TextBlock Text="{Binding Person.Name}" FontSize="18" Margin="5,2"/>
      </Border>

      <!-- TopSegments -->
      <ItemsControl
        Grid.Row="2"
        ItemsSource="{Binding Person.TopSegments}"
        IsVisible="{Binding Person.TopSegments, Converter={x:Static conv:VisibilityConverter.NotNullToVisible}}"
        ItemTemplate="{DynamicResource PM.DT.Segment.Lite}">

        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <StackPanel Orientation="Horizontal"/>
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
      </ItemsControl>
    </Grid>
  </DataTemplate>

  <DataTemplate x:Key="PM.DT.Segment" DataType="{x:Type ftSegment:SegmentM}">
    <Grid
      x:Name="root"
      Background="Transparent"
      Classes.personIsNull="{Binding Person, Converter={x:Static ObjectConverters.IsNull}}"
      Classes.isSelected="{Binding IsSelected}"
      Classes.canSetAsSamePerson="{ReflectionBinding S.Segment.CanSetAsSamePerson, Source={x:Static pm:App.Core}}">

      <Interaction.Behaviors>
        <RoutedEventTriggerBehavior RoutedEvent="{x:Static ToolTip.ToolTipOpeningEvent}">
          <InvokeCommandAction
            Command="{x:Static ftSegment:SegmentRectVM.ReloadSegmentToolTipCommand}"
            CommandParameter="{Binding}"/>
        </RoutedEventTriggerBehavior>
      </Interaction.Behaviors>

      <ToolTip.Tip>
        <ToolTip Padding="0" BorderThickness="0">
          <ContentPresenter
            Content="{Binding}"
            ContentTemplate="{StaticResource PM.DT.Segment.ToolTip}"/>
        </ToolTip>
      </ToolTip.Tip>

      <Image Stretch="Fill">
        <Image.Source>
          <MultiBinding Converter="{x:Static pmConv:SegmentThumbnailSourceConverter.Inst}">
            <Binding Path="FilePathCache"/>
            <Binding/>
          </MultiBinding>
        </Image.Source>
      </Image>

      <PathIcon
        x:Name="noPersonIcon"
        Classes="shadow"
        Data="{StaticResource IconPeople}"
        Foreground="Red"
        Margin="5"
        HorizontalAlignment="Left"
        VerticalAlignment="Top"/>

      <Grid x:Name="buttons" VerticalAlignment="Top" ColumnDefinitions="Auto,Auto,*">
        <Border
          x:Name="boSelectedCount"
          Grid.Column="0"
          Classes="round darker"
          Background="{DynamicResource MH.B.Accent}">

          <TextBlock
            HorizontalAlignment="Center"
            Classes="shadow"
            Text="{ReflectionBinding S.Segment.Selected.Items.Count, Source={x:Static pm:App.Core}}"/>
        </Border>

        <c:IconButton
          x:Name="btnSamePerson"
          Grid.Column="1"
          Command="{x:Static ftSegment:SegmentVM.SetSelectedAsSamePersonCommand}"
          Width="20"
          Height="20"
          ap:Icon.Size="13"/>

        <c:IconButton
          x:Name="btnPersonDetail"
          Grid.Column="2"
          Command="{x:Static layout:ToolsTabsVM.OpenPersonTabCommand}"
          CommandParameter="{Binding Person}"
          HorizontalAlignment="Right"
          Width="20"
          Height="20"
          ap:Icon.Size="13"/>
      </Grid>

      <Grid.Styles>
        <Style Selector="PathIcon#noPersonIcon">
          <Setter Property="IsVisible" Value="False"/>
        </Style>
        <Style Selector="Grid#root.personIsNull PathIcon#noPersonIcon">
          <Setter Property="IsVisible" Value="True"/>
        </Style>
        <Style Selector="Grid#root:pointerover PathIcon#noPersonIcon">
          <Setter Property="IsVisible" Value="False"/>
        </Style>

        <Style Selector="Grid#buttons">
          <Setter Property="IsVisible" Value="False"/>
        </Style>
        <Style Selector="Grid#root:pointerover Grid#buttons">
          <Setter Property="IsVisible" Value="True"/>
        </Style>

        <Style Selector="Border#boSelectedCount">
          <Setter Property="IsVisible" Value="False"/>
        </Style>
        <Style Selector="Grid#root.isSelected.canSetAsSamePerson Border#boSelectedCount">
          <Setter Property="IsVisible" Value="True"/>
        </Style>

        <Style Selector="c|IconButton#btnSamePerson">
          <Setter Property="IsVisible" Value="False"/>
        </Style>
        <Style Selector="Grid#root.isSelected.canSetAsSamePerson c|IconButton#btnSamePerson">
          <Setter Property="IsVisible" Value="True"/>
        </Style>

        <Style Selector="Grid#root.personIsNull c|IconButton#btnPersonDetail">
          <Setter Property="IsVisible" Value="False"/>
        </Style>
      </Grid.Styles>
    </Grid>
  </DataTemplate>
</ResourceDictionary>